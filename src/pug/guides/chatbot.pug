extends ../layouts/main.pug
include ../includes/mixins.pug
block title
    | ChatBot creation
block additionalStyles
    +codehighlightStyles
block additionalScripts
    +codehighlightScripts
block content
    h1 Introduction
    p.
        Our chat servers use a standard secure websocket protocol (wss)
        as defined in #[a(href="https://tools.ietf.org/html/rfc6455") RFC6455].
        For more info see the #[a(href="#Raw API") Raw API section]
    h1 Events
    p.
        All libraries use the same websocket actions and events events,
        here is a list of them with raw JSON examples.
    h2 Actions
    table.table
        colgroup
            col(style="width:10%")
            col(style="width:20%")
            col(style="width:35%")
            col(style="width:35%")
        thead
            tr
                th Name
                th Description
                th Request
                th Response
        tbody
            for actionData, actionName in fixtures.chat.actions
                tr(id=`chat-action-${actionName}`)
                    td=actionName
                    td=actionData.description
                    td
                        +codehighlight('json')=actionData.example.request
                    td=actionData.response
                        if actionData.example.response
                            +codehighlight('json')=actionData.example.response
                        else
                            | No success response
    h2 Events
    table.table
        colgroup
            col(style="width:10%")
            col(style="width:20%")
            col(style="width:70%")
        thead
            tr
                th Name
                th Description
                th Example
        tbody
            for eventData, eventName in fixtures.chat.events
                tr(id=`chat-event-${eventName}`)
                    td=eventName
                    td=eventData.description
                    td
                        +codehighlight('json')=eventData.example
    h1 Creating a simple chat bot
    p.
        In this guide, we will show you how to create a "ping-pong" chat bot using
        our #[a(href="https://github.com/WatchBeam/beam-client-node") Node],
        #[a(href="https://github.com/WatchBeam/beam-client-java") Java]
        and #[a(href="https://github.com/WatchBeam/beam-client-python") Python]
        libraries and some examples using the
        the API directly with #[a(href="https://curl.haxx.se/") curl]
        and #[a(href="https://github.com/websockets/wscat") wscat].

        Please note that it is possible to create a passive bot as well,
        a passive bot will not require #[b any] authentication.
    +bsTabs({
        node: 'Node and Typescript',
        java:'Java',
        python: 'Python',
        raw: 'Raw'
    }, 'guide')
        +bsTabItem('node', 'guide', true)
            h3 Prerequisites
            ol
                li.
                    Get #[a(href="https://nodejs.org/en/") NodeJS and NPM] for your platform.
                li.
                    Create a #[a(href="https://docs.npmjs.com/cli/init") new project] with npm.
                li.
                    Run #[kbd npm i -S beam-client-node]
            h3 Usage
            p.
                The node implementation is using
                #[a(href="http://bluebirdjs.com/docs/api-reference.html") Bluebird]
                promises, so natively callbacks are not supported.
            p.
                Before we can connect to the chat servers, we must authenticate
                ourselves with the backend.
                In our example we are going to use the simple login auth.
            +codehighlight('javascript')
                include ./code/node/chatbot/1.js
            p.
                The result should be something like this:
            +codehighlight('txt')
                include ./code/node/chatbot/1_response.txt
            p.
                In the next step we will use the response from the backend to connect
                to the chat server, for that we have the #[kbd createChatSocket()] function.
            +codehighlight('javascript')
                include ./code/node/chatbot/2.js
            p.
                The result should look something like this:
            +codehighlight('txt')
                include ./code/node/chatbot/2_response.txt
            p.
                Now that we are more familiar with how we do things using the node client
                lets bring on the ping-pong example.
            +codehighlight('javascript')
                include ./code/node/chatbot/3.js
        +bsTabItem('java', 'guide')
            h3 Prerequisites
            ol
                li
                    a(href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html") Java
                li
                    | A Java IDE such as:
                    ol
                        li
                            a(href="https://www.eclipse.org/downloads/") Eclipse
                        li
                            a(href="https://www.jetbrains.com/idea/") IntelliJ
                        li
                            a(href="https://netbeans.org/downloads/") NetBeans
                li
        +bsTabItem('python', 'guide')
            h3 Prerequisites
            ol
                li.
                    Get #[a(href="https://www.python.org/downloads/") Python 3] with pip
                    for your platform.
                li Create a new Python project.
                li.
                    Install
                    #[a(href="https://github.com/WatchBeam/beam-client-python") beam-client-python]
                    via #[kbd pip install git+https://github.com/WatchBeam/beam-client-python].
            h3 Usage
            p.
                The python client only supports password auth at the moment, using
                an account with 2 factor authentication is not possible.
            p.
                First we create a simple config file that contains our user auth data.
            +codehighlight('python')
                include ./code/python/chat/1.py
        +bsTabItem('raw', 'guide')
            h2 Raw API
            p.
                The code here is not meant for a real world implementation but rather
                as an explanation/help for custom implementors.
            h3 Prerequisites
            ol
                li.
                    A bash shell
                li
                    a(href="https://curl.haxx.se/") curl
                li
                    a(href="https://github.com/websockets/wscat") wscat
                li
                    a(href="https://stedolan.github.io/jq/") jq
            h3 Usage
            p.
                First, we want to show off how to connect to perform a simple
                password auth with #[kbd curl].
                We simply send our credentials and store the resulting json
                in a variable for later use.
            +codehighlight('bash')
                include ./code/raw/chat/1.sh
            p.
                In the next step we use the previously gathered info to request
                the chat server auth info.
            +codehighlight('bash')
                include ./code/raw/chat/2.sh
            p.
                Now that we have all required information, we can etablish a connection
                to the chatserver with #[kbd wscat].
                As shown in the next snippet, we send a authentication payload first.
                #[i Please note that all previous steps are optional if you just want to listen to the chat].
            +codehighlight('bash')
                include ./code/raw/chat/3.sh
            p.
                Typically the first messages we receive are our own
                #[a(href="#chat-event-UserJoin") UserJoin] event
                and an acknowledgement of our auth.


            script(type="text/javascript").
                hljs.initHighlightingOnLoad();
