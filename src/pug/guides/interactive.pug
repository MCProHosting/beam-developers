extends ../layouts/main.pug
include ../includes/mixins.pug
block title
    | Interactive Integration creation
block additionalStyles
    +codehighlightStyles
block additionalScripts
    +codehighlightScripts
block content
    h1 Introduction
    p.
        Our interactive platform communicates using #[a(href="https://developers.google.com/protocol-buffers/") Google's Protocol Buffer]
        specification over a standard secure websocket protocol (wss) connection. Viewers' inputs from the site are sent to Beam's aggregator
        server, which analyzes them for you, before being sent to your Robot.
    h1 Creating a Simple Interactive Robot

    h2 Registering a Game On Beam
    p.
        Head over to the Interactive section of the Beam website. Click the plus
        button next to "My Games", and name the game whatever you'd like.
        Hit "Create Game".
    p.
        You’re now in the control editor. For our simple robot, we just want to
        be able to record joystick input. Click the Joystick Tab on the right
        side of the screen and then click "New". Click the arrow on the right
        of your new joystick to expand its settings and check the "Coords (Mean)" analysis.
        Collapse the Joystick settings by clicking the arrow again and then drag
        the ""#0" item onto the grid on the left hand side of the screen.

    p.
        Everything else can be left to the defaults. Click Save.

    h2 Writing the Code.
    p.
        We’re going to be using our #[a(href="https://github.com/WatchBeam/beam-interactive-node") Node],
        #[a(href="https://github.com/WatchBeam/beam-interactive-java") Java]
        and #[a(href="https://github.com/WatchBeam/beam-interactive-python") Python] to build a simple Robot.
        Users will be able to visit your channel on Beam, and control the mouse
        movement on your screen.

    +bsTabs({
        node: 'Node',
        java:'Java',
        python: 'Python'
    }, 'guide')
        +bsTabItem('node', 'guide', true)
            h3 Prerequisites
            ol
                li.
                    Get #[a(href="https://nodejs.org/en/") NodeJS and NPM] for your platform.
                li.
                    Create a #[a(href="https://docs.npmjs.com/cli/init") new project] with npm.
                li.
                    Run #[kbd npm i -S beam-client-node beam-interactive-node robotjs]
            h3 Usage
            p.
                Let's start by importing all of the modules which we'll need and define
                our channel id, username and password. You can find your channel id by
                going to #[a(href="https://beam.pro/api/v1/channels/<username>?fields=id") https://beam.pro/api/v1/channels/<username>?fields=id]
                in your browser.

            +codehighlight('javascript')
                include ./code/node/interactive/1.js
            p.
                To connect to Beam Interactive we need to authenticate as our user specified above
                using  #[kbd beam-client-node] we can use password based authentication to do this.
                Once authenticated we're asking the api to join a channel as a robot with #[kbd beam.game.join].
                We'll use the response from this to create a robot in the next step.
            +codehighlight('javascript')
                include ./code/node/interactive/2.js
            p.
                The join request should resolve with something like this
            +codehighlight('json')
                include ./code/node/interactive/2_response.txt
            p.
                We can use these details to create a robot by writing the #[kbd createRobot] function.
            +codehighlight('javascript')
                include ./code/node/interactive/3.js
            p.
                Once we have a robot the last thing to do is to hook the joystick
                on beam up to your mouse. We do this by creating the #[kbd handleRobotConnection] function.
            +codehighlight('javascript')
                include ./code/node/interactive/4.js
            p.
                This function takes our Robot instance and initiates a handshake, An error will be
                reported if a problem occurs during this process. Once its complete you'll get regular
                reports from Beam as a #[kbd report] event on the robot object.
            p.
                As we've only registered a Joystick control on Beam we'll only get joystick updates.
                These come in an array within the report. As we've selected mean, the mean of all
                the viewers joysticks will be contained within the coordMean object. We take this
                mean and apply it to the mouse position.

                The final code can be found below:
            +codehighlight('java')
                include ./code/node/interactive/5.js
        +bsTabItem('java', 'guide')
            h3 Prerequisites
            ol
                li
                    a(href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html") Java
                li
                    | A Java IDE such as:
                    ol
                        li
                            a(href="https://www.eclipse.org/downloads/") Eclipse
                        li
                            a(href="https://www.jetbrains.com/idea/") IntelliJ
                        li
                            a(href="https://netbeans.org/downloads/") NetBeans
                li
                    | A Java Project Manager such as:
                    ol
                        li
                            a(href="https://maven.apache.org/") Maven
                        li
                            a(href="gradle.org") Gradle
            h3 Project Setup
            p.
                Setup a standard project for your environment and include
                #[a(href="https://github.com/WatchBeam/beam-client-java") beam-client-java]
                and #[a(href="https://github.com/WatchBeam/beam-interactive-java") beam-interactive-java]
                as dependancies.
            h3 Usage
            p.
                Let's start by creating a Main class for the Java application and
                importing all of the required packages. We'll also initialize a few
                objects. A instance of the BeamAPI and an instance of the AWT Robot class
                which will allow us to control the mouse.
            +codehighlight('java')
                include ./code/java/interactive/1.java
            p.
                Next we need to setup a Beam Interactive robot and supply it with
                valid beam account credentials and a channel id. You can find your channel id by
                going to #[a(href="https://beam.pro/api/v1/channels/<username>?fields=id") https://beam.pro/api/v1/channels/<username>?fields=id]
                in your browser.

            +codehighlight('java')
                include ./code/java/interactive/2.java
            p.
                The last thing to do is wire up a report handler that takes the joystick's
                coordMean and applys it to the mouse.
            +codehighlight('java')
                include ./code/java/interactive/3.java
            p.
                When you put everything together you get the final code which is below:
            +codehighlight('java')
                include ./code/java/interactive/4.java
        +bsTabItem('python', 'guide')
            h3 Prerequisites
            ol
                li Python
                li Pip (Python Package Manager)
            p.
                Once you have the prerequisites install #[a(href="https://github.com/WatchBeam/beam-interactive-python") beam-interactive-python],
                #[a(href="https://pypi.python.org/pypi/PyAutoGUI") PyAutoGUI]and the #[kbd requests] module.
                Once installed create a new file and add the required imports.
            +codehighlight('python')
                include ./code/python/interactive/1.py
            p.
                Next we need to setup some variables to store authentication details
                and some funcions to login the user and retrieve some data from beam.
            +codehighlight('python')
                    include ./code/python/interactive/2.py
            p.
                After that we'll write our error and report handlers. Our report handlers
                takes the joystick's coordMean and applies it to the mouse.
            +codehighlight('python')
                    include ./code/python/interactive/3.py
            p.
                The final step is to setup the coroutine that will handle the connection to beam.
            +codehighlight('python')
                include ./code/python/interactive/4.py
            p.
                The full code is below:
            +codehighlight('python')
                include ./code/python/interactive/5.py

    h2 Start Streaming
    p.
        Head over to your channel page and click "Go Interactive" on the bottom
        of the page. Now find your game and click the "Play" button. If everything
        has gone well you should now see a joystick underneath your channel’s stream.
        Move the joystick and your mouse should move in that direction.

    script(type="text/javascript").
        hljs.initHighlightingOnLoad();

