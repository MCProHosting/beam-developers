extends ./tutorial_layout.pug

block title
    | REST Tutorial | Beam Developers

block tutorialTitle
    h1 Talking to our REST API

block tutorialMenu
    li: a(href='#introduction') Introduction
    li: a(href='#what_is_rest') What is REST?
    li: a(href='#code') Writing the Code

block tutorialContent
    #introduction.page-header
        p This guide will walk you through the process of developing a bot which shows the tells the user their rank on Beam, based on how many total viewers they have.

    h2#what_is_rest What is REST?

    include ./rest_intro.pug

    h2#code Writing the Code
    p.
        Weâ€™re going to be using our #[a(href='https://github.com/WatchBeam/beam-client-node' target='_blank') Node] and #[a(href='https://github.com/WatchBeam/beam-client-java' target='_blank') Java] clients to build this app. The user will run it and it'll tell them how far they are from being the top streamer on Beam!

    +bsTabs('rest_guide', {
        node: 'Node',
        java:'Java',
        python: 'Python'
    })
        +bsTabItem('rest_guide', 'node')
            h3 Prerequisites
            ol
                li Get #[a(href='https://nodejs.org/en/' target='_blank') NodeJS and NPM] for your platform.
                li Create a #[a(href='https://docs.npmjs.com/cli/init' target='_blank') new project] with npm.
                li Run #[code npm i -S beam-client-node]

            h3 Usage
            p Let's start by importing all of the modules which we'll need.

            +highlightFile('javascript','./tutorials/code/node/rest/1.js')

            p To get the user's channel name we'll ask for it from the command line and use this to make a REST request that will provide a response with their channel details. We'll then print out how many viewers the have on their channel.
            +highlightFile('javascript','./tutorials/code/node/rest/2.js')

            p You've already got working code that connects and talks to our API. Go ahead, try it! Run #[code node rank.js &lt;your_username&gt;] in your terminal.
            +highlightFile('text','./tutorials/code/node/rest/2_response.txt')

            p Now it's time to dig up all that stuff you learned in your computer science course. We want to sort the channels on Beam by the number of viewers they have, and loop through until we find the first channel that has less viewers than we do. To do this we'll have to make several calls to the API, and in Node this kind of chaining is often done through recursion.

            p We define a function simply called #[code run] that we initially call with page #[code 0]. Each time it makes a request, it'll count up the channels it gets back and stop when it gets a channel less or as popular as we are.
            +highlightFile('javascript','./tutorials/code/node/rest/3.js')

            p Now we just need to fill in that mysterious #[code getChannelsDescending(page)] function with a call on the Beam client. The client has several helpers here that are essentially light wrappers around the #[a(href='https://github.com/request/request' target='_blank') request] package. So, we'll pass options in that we read from the #[a(href='/rest.html#channels_get') channel endpoint docs] to do what we need:
            +highlightFile('javascript','./tutorials/code/node/rest/4.js')

            p All together now, you can put this together into a single script...

            +highlightFile('javascript','./tutorials/code/node/rest/5.js')

            p ...and run it to get your rank on Beam!

            +highlightFile('text','./tutorials/code/node/rest/5_response.txt')
        +bsTabItem('rest_guide', 'java')
            h3 Prerequisites
            include ./java_prereqs.pug
            h3 Project Setup
            p.
                Setup a standard project for your environment and include
                #[a(href='https://github.com/WatchBeam/beam-client-java' target='_blank') beam-client-java]
                as a dependancy.
            include ./snippets/java/chat_project_manager.pug
            h3 Usage
            p.
                Let's start by creating a Main class for the Java application and importing all of the required packages. We'll also initialize an instance of the BeamAPI.
            +highlightFile('java','./tutorials/code/java/rest/1.java')
            p.
                Next let's fetch the user's channel we'll grab their username off the command line. The Java Client uses a service orientated approach which means all channel related functions are on the #[code ChannelService]. So we need to #[code use] that service to get the channel data. Most methods that talk to the API return a #[a(href='http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html' target='_blank') Java Future]. These are a form of asyncronous operation in Java. For this tutorial however we'll use the #[code get] method of a future to wait for the Future to complete. It returns a #[code BeamChannel] object. On the channel we can find the #[code viewersTotal] property which we can then print.
            +highlightFile('java','./tutorials/code/java/rest/2.java')
            p Now you've already got some working code!
            include ./run_config.pug
            p.
                Next let's make a function which gets a page of channels from the API sorted in descending order based on total views.
            +highlightFile('java', './tutorials/code/java/rest/3.java')
            p Finally, we can make a function that loops through the #[code BeamChannel] objects on the #[code ShowChannelsResponse], until it gets to a channel that equal to or lower than you're rank. If this is not found we request the next page recursively.
            p When it finds such a channel, it'll log it to the console.
            +highlightFile('java','./tutorials/code/java/rest/4.java')
            p To start the ranking process we just need to call #[code run(0, viewers, 1)] in the #[code main] method. All together you can put the code together into one Java Class...
            +highlightFile('java','./tutorials/code/java/rest/5.java')

            p ... and run it to get your Rank on Beam!
            +highlightFile('text', './tutorials/code/java/rest/5_response.txt')

        +bsTabItem('rest_guide', 'python')
            h3 Prerequisites
            ol
                li Python 3
                li pip (Python Package Manager)

            p Unfortunately we don't have a client library built for Python but, don't worry, the API is still super simple to use with the wonderful #[a(href='https://github.com/kennethreitz/requests' target='_blank') requests] package. Go ahead and fire of #[code pip install requests] if you don't already have it installed.

            p First off, lets import what we need and make a login request to the API. We'll use #[code requests.Session] since we may want to expand this app later and the session cookie created when we log in.
            +highlightFile('python','./tutorials/code/python/rest/1.py')

            p After authenticating we'll get back a HTTP response that includes #[a(href='/rest.html#User') a bunch of details] about the user. We'll print out how many viewers the have on their channel.

            +highlightFile('python','./tutorials/code/python/rest/2.py')

            p You've already got working code that connects and talks to our API. Go ahead, try it! Run #[code python rank.py &lt;your_username&gt;] in your terminal.

            +highlightFile('text','./tutorials/code/python/rest/2_response.py')

            p Next, let's make a function that loops the #[a(href='/rest.html#channels_get') channel endpoint] in descending order by total viewers, until it gets to a channel that equal to or lower than you're rank. When it finds such a channel, it'll return it.

            +highlightFile('python','./tutorials/code/python/rest/3.py')

            p All together now, you can put this together into a single script...

            +highlightFile('python','./tutorials/code/python/rest/4.py')

            p ...and run it to get your rank on Beam!

            +highlightFile('text','./tutorials/code/python/rest/4_response.txt')

    h2 Want More Info?
    p.
        If you'd like more information on our Rest API, checkout the #[a(href='/rest.html') rest reference docs].
    include ../snippets/help.pug
