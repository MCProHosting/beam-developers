p If your friend was going to the store and you needed something, you might ask them to "get" something for you. After they get back, they might "put" that item away for you. These are the constructs we use in everyday life, and REST APIs attempt to build on those, but, rather than operating on physical items, you're dealing with objects on the computer.

p When you send HTTP requests to webpages, each request contains a verb. Most browsing you do involves your web browser making #[code GET] requests&mdash;asking for this page, for instance! But there are several other verbs your browser uses:

ul
    li #[code GET] looks something up, as we've said
    li #[code POST] creates something
    li #[code PUT] updates something
    li #[code DELETE] destroys something

p On our RESTful API, you make requests by calling #[code VERB https://mixer.com/api/v1/resources]. We'll abbreviate this as #[code VERB /resources] from now on. For instance, to create a new user, you would call #[code POST /users] (the endpoints are always plural). If you want to operate on a particular user object, you would append their ID to that URL, such as #[code GET /users/344] to return information about user ID #[code 344].

p You can also run actions on a particular user by chaining on "actions", such as #[code PUT /users/344/confirm], which is used to verify an account. Here's a full blueprint with some examples:

table.table
    thead
        tr
            th Endpoint
            th Description
            th Example
    tbody
        tr
            td: code GET /resources
            td Returns a list of 'resource' objects.
            td: code GET /users
        tr
            td: code POST /resources
            td Creates a new 'resource' object.
            td: code POST /users
        tr
            td: code GET /resources/{id}
            td Returns information about the 'resource' with the provided ID.
            td: code GET /users/314
        tr
            td: code PUT /resources/{id}
            td Updates a resource with the provided ID.
            td: code PUT /users/314
        tr
            td: code POST /resources/{id}/action
            td Runs some action on a 'resource'.
            td: code PUT /users/314/confirm
        tr
            td: code GET /resources/{id}/data
            td Gets some nested information about a 'resource'.
            td: code GET /users/314/avatar
        tr
            td: code DELETE /resources/{id}
            td Delete a resource from the server.
            td: code DELETE /channels/314/streamKey
