extends ./tutorial_layout.pug

block title
    | Constellation Tutorial | Mixer Developers

block tutorialTitle
    h1 Constellation Tutorial

block tutorialContent
    h2#intro Introduction
    p.
        Constellation is our daemon responsible for stateful aspects of Mixer. One of its features is Live Loading. Live Loading let's you receive realtime updates of models and resources as they change on Mixer.
    p.
        In this tutorial we're going to connect to Constellation and subscribe to Live Loading updates of your channel. If your viewer count or channel title changes, you'll receive an update within your code that you can respond to.

    h2#code Writing the Code
    p Select a language below.

    +bsTabs('constellation_guide', {
        node: 'Node & TypeScript'
    })
        +bsTabItem('constellation_guide', 'node')
            h3 Prerequisites
            ol
                li.
                    Get #[a(href='https://nodejs.org/en/' target='_blank') NodeJS and NPM] for your platform.
                li.
                    Create a #[a(href='https://docs.npmjs.com/cli/init' target='_blank') new project] with npm.
                li.
                    Run #[code npm install --save carina ws]
            h3 Usage
            p.
                #[a(href='https://github.com/mixer/carina') Carina] is Mixer's Node Constellation client. It makes talking to Constellation super easy.
            p Let's start by importing and setting up all of the modules which we'll need and defining our channel id.
            include ./channelid.pug

            +highlightFile('javascript','./tutorials/code/node/constellation/1.js')

            p Next we'll create an instance of Carina to use for our code. We pass an object of options to the constructor. #[code isBot] must be set to true if you're writing an automated bot.

            +highlightFile('javascript','./tutorials/code/node/constellation/2.js')

            p To receive Live Loading events you need to subscribe to them. We'll just need #[code channel:{id}:update]. For a full list of events check our #[a(href='/reference/constellation/index.html#events_live_events') Constellation reference guide]. You subscribe to events within Carina by using the #[code subscribe] method.

            +highlightFile('javascript','./tutorials/code/node/constellation/3.js')

            p The second argument to the subscribe method is a function which will be called with the data when the event is sent. #[strong Inside] the function you can do a lot with the data but for now we'll just log it to the console.

            +highlightFile('javascript','./tutorials/code/node/constellation/4.js')

            p.
                That's it! Save the file as 'constellation.js' and run it with #[code node constellation.js] from your terminal. Try updating your channel details.
            p.
                For example, if you update your channel title to 'test', you'll get an object from the event that looks like this:
            +highlightFile('javascript','./tutorials/code/node/constellation/example_data.js')
            p.
                Try updating your channel description, age rating or selected game for more examples.

            p The final code can be found below:

            +highlightFile('javascript','./tutorials/code/node/constellation/5.js')

            p Carina also works with TypeScript and your Browser. For more information, check out its #[a(href='https://github.com/mixer/carina') GitHub page].
    h2 Further Ideas
    ul
        li Why not combine Constellation with our #[a(href='/tutorials/rest.html') REST API] and make something super cool?
        li Use some of the other #[a(href='/reference/constellation/index.html#events_live_events') Constellation events] to get events about your stream.
    h2 Want More Info?
    p.
        If you'd like more information on Constellation system, check out the #[a(href='/reference/constellation/index.html') reference guide].
    include ../snippets/help.pug
block tutorialMenu
    li: a(href='#intro') Introduction
    li: a(href='#code') Writing The Code
