extends ./tutorial_layout.pug

block append scripts
    +oauthLinks('interactive:robot:self channel:details:self')

block title
    | Interactive Tutorial | Mixer Developers

block tutorialTitle
    h1 Build an Interactive Robot

block tutorialContent
    h2#intro Introduction
    .alert.alert-warning
        p.
            These tutorials are for #[a(href='/reference/interactive1/index.html') Interactive 1], Interactive 2 tutorials are coming soon! While you wait, check out our #[a(href='/reference/interactive/index.html') Interactive 2 reference docs].
    p.
        Our interactive platform communicates using #[a(href='https://developers.google.com/protocol-buffers/' target='_blank') Google's Protocol Buffer]
        specification over a standard secure websocket protocol (wss) connection. Viewers' inputs from the site are sent to Mixer's aggregator
        server, which analyzes them for you, before being sent to your Robot.

    h2#controlEditor Registering a Game On Mixer
    p.
        Head over to the #[a(href='https://mixer.com/lab' target='_blank') Developer Lab] and click the 'Interactive Games' tab. Click the plus
        button next to 'My Games', and name the game whatever you'd like.
        Hit 'Create Game'.
    p.
        You’re now in the control editor. For our simple robot, we just want to
        be able to record joystick input. Click the Joystick Tab on the right
        side of the screen and then click 'New'.

    p.
        Expand the joystick's settings by clicking the arrow on the right of your new joystick and check the 'Coords (Mean)' analysis. Drag the Joystick onto the control grid on the left.
    p.
        The final result should look like this:
    img(src='/img/tutorials/interactive/joystick.png' alt='Interactive joystick configuration')

    p.
        Everything else can be left as default. Click Save. We're finished with the control editor. Let's get started on writing the code!

    h2#code Writing the Code
    p.
        We’re going to be using our #[a(href='https://github.com/mixer/beam-interactive-node' target='_blank') Node],
        #[a(href='https://github.com/mixer/beam-interactive-java' target='_blank') Java]
        and #[a(href='https://github.com/mixer/beam-interactive-python' target='_blank') Python] to build a simple Robot.
        Users will be able to visit your channel on Mixer, and control the mouse
        movement on your screen.

    include ./snippets/oauth_introduction.pug

    +bsTabs('interactive_guide', {
        node: 'Node',
        java:'Java',
    })
        +bsTabItem('interactive_guide', 'node')
            h3 Prerequisites
            ol
                li.
                    Get #[a(href='https://nodejs.org/en/' target='_blank') NodeJS and NPM] for your platform.
                li.
                    Create a #[a(href='https://docs.npmjs.com/cli/init' target='_blank') new project] with npm.
                li.
                    Run #[code npm i -S @mixer/client-node beam-interactive-node robotjs]
            h3 Usage
            p.
                Let's start by importing all of the modules which we'll need and define
                our channel id.
            include ./channelid.pug

            +highlightFile('javascript','./tutorials/code/node/interactive/1.js')
            p.
                To connect to Mixer Interactive we need to authenticate as our user specified above
                using  #[code @mixer/client-node] we'll use an implicit OAuth token to do this. The required scopes are #[code interactive:robot:self].
                Once authenticated we're asking the api to join a channel as a robot with #[code beam.game.join].
                We'll use the response from this to create a robot in the next step.
            +highlightFile('javascript','./tutorials/code/node/interactive/2.js')
            p.
                The join request should resolve with something like this
            +highlightFile('json','./tutorials/code/node/interactive/2_response.json')
            p.
                We can use these details to create a robot by writing the #[code createRobot] function.
            +highlightFile('javascript','./tutorials/code/node/interactive/3.js')
            p.
                Once we have a robot we need to perform a handshake with the interactive servers and then
                hook up event handlers so that a joystick on beam is bound to your mouse.
                We do this by creating the #[code performRobotHandShake] and #[code setupRobotEvents] functions.
            +highlightFile('javascript','./tutorials/code/node/interactive/4.js')
            p.
                This function takes our Robot instance and initiates a handshake, An error will be
                reported if a problem occurs during this process. Once its complete you'll get regular
                reports from Mixer as a #[code report] event on the robot object.
            p.
                As we've only registered a Joystick control on Mixer we'll only get joystick updates.
                These come in an array within the report. As we've selected mean, the mean of all
                the viewers joysticks will be contained within the coordMean object. We take this
                mean and apply it to the mouse position.

                The final code can be found below:
            +highlightFile('java','./tutorials/code/node/interactive/5.js')
        +bsTabItem('interactive_guide', 'java')
            h3 Prerequisites
            include ./java_prereqs.pug
            h3 Project Setup
            p.
                Setup a standard project for your environment and include
                #[a(href='https://github.com/mixer/beam-client-java' target='_blank') beam-client-java]
                and #[a(href='https://github.com/mixer/beam-interactive-java' target='_blank') beam-interactive-java]
                as dependancies.
            include ./snippets/java/interactive_project_manager.pug
            h3 Usage
            p.
                Let's start by creating a Main class for the Java application and
                importing all of the required packages. We'll also initialize a few
                objects. A instance of the MixerAPI and an instance of the AWT Robot class
                which will allow us to control the mouse.
            +highlightFile('java','./tutorials/code/java/interactive/1.java')
            p.
                Next we need to setup a Mixer Interactive robot and supply it with
                valid beam account credentials and a channel id.
            include ./channelid.pug

            +highlightFile('java','./tutorials/code/java/interactive/2.java')
            p.
                The last thing to do is wire up a report handler that takes the joystick's
                coordMean and applys it to the mouse.
            +highlightFile('java','./tutorials/code/java/interactive/3.java')
            p.
                When you put everything together you get the final code which is below:
            +highlightFile('java','./tutorials/code/java/interactive/4.java')

    h2#stream Start Streaming
    p.
        Head over to your channel page and click 'Go Interactive' on the bottom
        of the page. Now find your game and click the 'Play' button.

    p.
        You should now see "Waiting for interactive app to connect. Make sure to launch it!". At this point start your project through the usual method for your chosen language.

    p.
        If everything has gone well you should now see a joystick underneath your channel’s stream. Move the joystick and your mouse should move in that direction.

    h2 Want More Info?
    p.
        If you'd like more information on our Interactive system, check out the #[a(href='/reference/interactive/index.html') reference guide].
    include ../snippets/help.pug
block tutorialMenu
    li: a(href='#intro') Introduction
    li: a(href='#controlEditor') Registering a Game On Mixer
    li: a(href='#code') Writing The Code
    li: a(href='#stream') Start Streaming
