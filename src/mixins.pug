mixin highlightFile(language, file)
    +highlightStr(
        language,
        readFile(file)
            .toString()
            /* Removes eslinst-disable or global definition comments in source files */
            .replace(/\/\*\W+(eslint-disable|global)((?!\*\/).)*\*\/\s*/ig, ''))

mixin highlightJson(obj)
    +highlightStr('json', JSON.stringify(obj, null, 3))

mixin highlightStr(language, str)
    pre
        code(class=language)
            != highlight(language, str)

mixin scripts
    script(
        src='https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js'
        crossorigin='anonymous'
        integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4= sha512-3P8rXCuGJdNZOnUx/03c1jOTnMn3rP63nBip5gOP2qmUh5YAdVAvFZ1E+QLZZbC1rtMrQb+mah3AfYW11RUrWA=='
        )
    script(src='/js/developers.js')

mixin bsTabs(name, tabs)
    -
        bsTabs[name] = tabs;
        Object.defineProperty(tabs, '$active', {
            value: Object.keys(tabs).shift(),
        });

    ul.nav.nav-tabs(role='tablist')
        for tabName, tabId in tabs
            li(
                class=(tabs.$active === tabId ? 'active' : null)
                role='presentation'
            )
                a(data-toggle='tab' href=`#${name}_${tabId}`)= tabName
    if block
        .tab-content
            block

mixin bsTabItem(parent, name)
    -
        if (!bsTabs[parent]) {
            throw new Error(`Attempted to define child tab of unknown bsTab ${parent}`)
        }
        if (!bsTabs[parent][name]) {
            throw new Error(`${name} not found in bsTabs ${parent}`);
        }

    .tab-pane.fade(
        class=(bsTabs[parent].$active === name ? 'active' : null) && 'active in'
        data-name=bsTabs[parent][name]
        id=`${parent}_${name}`
        role='tabpanel'
    )
        block

mixin oauthLinks(scopes)
    script.
        $(function () {
            oauthUtils.registerOAuthClickHandler('#{scopes}');
        });

mixin clientIdLinks()
    script.
        $(function () {
            oauthUtils.registerClientIdClickHandler();
        });

mixin bookPageTitle(pages)
    = pages.hasOwnProperty(fileBasename) ? pages[fileBasename].name : fileBasename

mixin bookPageNav(location, page, isTopLevel=true)
    -
        const isActive = fileBasename === location;

        if (typeof page === 'string') {
            page = { name: page };
        }
        if (isTopLevel) {
            location = `./${location}.html`;
        } else {
            location = `#${location}`;
        }

    li(class=isActive ? 'active-locked' : '')
        a(href=location)= page.name

        if page.sections
            ul.nav.nav-stacked
                each section, hash in page.sections
                    +bookPageNav(hash, section, false)

mixin bookPrevArrow(pages)
    -
        const keys = Object.keys(pages);
        const index = keys.indexOf(fileBasename);

    if index > 0
        a.book-nav.book-nav-prev(href=`./${keys[index - 1]}.html` title=pages[keys[index - 1]].name)
            | &larr; Previous

mixin bookNextArrow(pages)
    -
        const keys = Object.keys(pages);
        const index = keys.indexOf(fileBasename);

    if index < keys.length - 1
        a.book-nav.book-nav-prev(href=`./${keys[index + 1]}.html` title=pages[keys[index + 1]].name)
            | Next &rarr;
