extends ../reference_layout.pug
include ../../rest/type.pug
block title
    | Interactive Reference | Beam Developers

block navbar
    .navbar-wrapper
        .container
            nav.navbar.navbar-inverse: +navbar()
            h1 Interactive Reference Documentation
block menu
    .hidden-print.rest-sidebar(role='complementary')
        nav
            ul.nav.nav-stacked
                include ./menu.pug
block reference
    br
    .alert.alert-info
        p.
            Looking for Interactive 1 docs? Find them #[a(href='/reference/interactive1/index.html') here].

    h2#introduction Introduction

    p Beam Interactive is a new way to let viewers directly control the environment in and around streamer’s broadcasts by letting viewers interact using a user interface. When a broadcast has interactivity enabled visual controls will appear beneath the broadcast's video that respond directly to the events of the broadcast. These controls can dynamically update as the broadcast progresses in response to different situations that occur.

    p Interactive developers and producers author interactive experiences which can run as a part of a Game or be their own entirely standalone application or tool. These experiences then get used by broadcasters to make their broadcasts interactive.

    p When a viewer interacts with controls, their input is sent directly to the experience allowing it to see exactly who is interacting and what they are doing. This level of engagement allows for the creation of truly unique and interactive experiences that let viewers and broadcasters experience Beam broadcasts on a whole new level.

    h2#overview Overview

    p These are the four major components used to create an interactive experience:

    ol(style='list-style-type: decimal')
        li The Game Client
        li The Interactive Service
        li An Interactive Project
        li Participants

    .figure
        img(src='/img/reference/interactive/HighLevelOverview.svg' alt='Diagram showing the structure of an interactive project')
        p.caption Diagram showing the structure of an interactive project

    h3#the-gameclient The Game Client
    p A Game Client is software code which processes Interactive events.It is written by an Interactive developer. Game Clients make connections to the #[a(href='#the-interactive-service') Interactive Service] and listen to events emitted from the service and take action within their environment, thus affecting the broadcast.

    p Game Clients can run in any environment, including:
    ul
        li In a game's existing code
        li In a 3rd party mod for a game
        li In a standalone application
        li In a game's server-side service

    h3#the-interactive-service The Interactive Service

    p The Interactive Service is a service operated by Beam. A Game Client connects to it to create an interactive session. Once a session is established, the service acts as a mediator for the Interactive session. The service manages data flow and state within the session by processing and distributing data emitted from both the #[a(href='#the-gameclient') Game Client] and #[a(href='#participants') Participants]. To interact with the session or update any state in the session a Game Client has to send messages to the service.

    h3#an-interactive-project An Interactive Project

    p An Interactive Project is created by a developer or team on Beam within our #[a(href='https://beam.pro/i/studio' target='_blank') Interactive Studio]. It stores settings and metadata about your interactive experience. Projects are owned by a single Beam user but can be #[a(href='#sharing-your-project') shared] with other users.

    p Within the Studio you can:
    ul
        li Edit your project's name and description
        li Create and store controls and scenes
        li Control who can access your project
        li Publish your project for everyone on Beam to see and use

    p When a #[a(href='#the-gameclient') Game Client] connects to the Interactive Service, the game client provides your project's ID. The service reads this ID and sets up an interactive session with the saved settings and controls created in the studio.

    h3#participants Participants

    p Participants are Beam users that are watching a broadcast in a broadcaster's channel. When they join the channel they are connected to the interactive session. They are provided with a set of on-screen controls that they can use to affect the broadcast. A #[a(href='#the-gameclient') Game Client] can react to game scenarios and interactive input to change the controls displayed to participants.

    h2#interactive-experience-structure Interactive Experience Structure

    p An Interactive experience contains a hierarchical structure of various elements that interact with and affect the experience.

    p These elements are:
    ul
        li Scenes
        li Controls
        li Groups
        li Participants

    .figure
        img(src='/img/reference/interactive/InteractiveHierarchy.svg' alt='Relationship between elements in the interactive hierarchy.')

    p.caption Relationship between elements in the interactive hierarchy.

    h3#scenes Scenes

    p A scene is a named collection of controls. These controls get arranged within the scene on a grid which controls how they are displayed to participants. The #[a(href='#the-gameclient') Game Client] can add or remove controls from a scene and control which participants are seeing which scene throughout the session. Scenes can be used to group controls together in a coherent fashion that has some meaning to the experience.

    p For example, in an adventure game, you might have a "Battle" scene which is displayed when a broadcaster is in battle and a "Field" scene which is displayed when they are walking around in the game world.

    p All #[a(href='#an-interactive-project') Interactive Projects] contain a default scene. Without any intervention from the #[a(href='#the-gameclient') Game Client] all participants and #[a(href='#groups') groups] will start on the default scene.

    p A #[a(href='#the-gameclient') Game Client] can change which scene a participant sees by updating the #[a(href='#groups') group] they belong to.

    h3#groups Groups
    p Groups are a way to group individual participants together. #[a(href='#participants') Participants] within a group all see the same #[a(href='#scenes') Scene] and can contribute input to the controls on that scene. #[a(href='#the-gameclient') Game Clients] can create and update groups at any time, including changing which scene the group is set to.

    p Groups can be used to create team-based experiences where groups compete to achieve a goal within the experience. For example, say a broadcaster is playing an adventure game. Interactive developers could create a "Helper" group and a "Hinderer" group. The help team would be able to heal the broadcaster and grant them buffs. The Hinderer team could spawn traps or monsters to try and get in the broadcasters way.

    p All participants start out in the default group. #[a(href='#the-gameclient') Game Clients] can re-assign participants to any group from the #[a(href='#the-gameclient') Game Client].

    h3#controls Controls
    p A Control is an interactive component within a scene. #[a(href='#participants') Participants] can individually interact with the control, usually with their keyboard, mouse or controller. Interactive currently has two types of controls, but additional types may be added in the future. These two controls are Buttons and Joysticks.

    h4#buttons Buttons
    .figure
        img(src='/img/reference/interactive/button.png' alt='A button control as displayed to a participant. This button costs one spark to press.')
    p.caption A button control as displayed to a participant. This button costs one spark to press.
    p Buttons are a rectangle positioned within a scene that a participant can click with their mouse or trigger with their keyboard or controller. #[a(href='#the-gameclient') Game Clients] receive events when a button is interacted with:

    ul
        li `mousedown` - Emitted when a button is pressed by a participant.
        li `mouseup` - Emitted when a button is released by a participant.

    p Interactive developers can use buttons to allow participants to contribute to votes, cause actions to happen or even control in-game entities directly.

    p Buttons have a number of properties which can be edited in both the Interactive Studio and from a Game Client.
    ol(style='list-style-type: decimal')
        li Displayed text
        li Spark Cost
        li Progress Bar Width - Displayed at the bottom of a button.
        li Disabled State - Disabled buttons cannot be interacted with.
        li Cooldown Duration - Prevents interaction until it expires.

    h5#what-are-sparks What are Sparks?

    p Sparks are Beam's virtual currency. Participants earn them while watching or participating in streams everywhere on Beam.

    h5#spark-transactions Spark Transactions
    .figure
        img(src='/img/reference/interactive/TransactionLifecycle.svg' alt='Diagram of a transaction\'s life cycle')
    p.caption Diagram of a spark transaction's life cycle, showing its transition betwen states.

    p When a button with a spark cost is pressed, it creates a transaction. To deduct sparks from a participant a #[a(href='#the-game-client') Game Client] must #[code capture] the transaction. If a transaction remains uncaptured for 5 minutes, it expires, and the cost associated with the transaction is not deducted from the user's spark balance.

    p This mechanism allows the #[a(href='#the-gameclient') Game Client] to decide if a button push should deduct sparks from a participant. This feature is a great way to ensure that input from a participant is used for something in the experience before deducting sparks from their balance.

    p Deducted sparks are #[strong not] transfered to the broadcaster.

    h4#joysticks Joysticks

    p Joysticks are circular controls positioned within a scene that participants can click and drag. Moving a joystick sends an input event down to the Game Client with the coordinates of the joystick relative to its center. Joystick coordinates range between #[code -1 and 1].
    .figure
        img(src='/img/reference/interactive/joystick.png' alt='A joystick display to a participant.')
    p.caption An idle joystick displayed to a participant. Its coordinates are #[code 0, 0].

    .figure
        img(src='/img/reference/interactive/joystickCoordinates.svg' alt='An illustration of the coordinate system for joysticks.')
    p.caption An illustration of the coordinate system for joysticks. The top left is #[code -1, -1] and the bottom right is #[code 1, 1].

    h2#getting-started Getting Started

    p Interested in making an Interactive Project? Let's get started!

    h3#prerequisites Prerequisites
    p Before getting started, you should have the following things:

    ul
        li A Beam user account.
        li Some knowledge of programming, unless you're using an existing Game Client or Interactive Application.
        li An awesome idea.

    h3#choosing-an-sdk-environment Choosing an SDK / Environment

    p If you're making a Game Client from scratch, you'll need to pick an Interactive SDK.

    table.table
        tr
            th Environment
            th Repository / Download
            th Documentation
            th Description
        tr
            td Typescript, Nodejs & Browsers
            td #[a(href='https://github.com/WatchBeam/beam-interactive-node2' target='_blank') GitHub]
            td #[a(href='https://watchbeam.github.io/beam-interactive-node2' target='_blank') Reference Docs]
            td Great for Interactive tools and utilities and beginners.
        tr
            td C++
            td #[a(href='https://github.com/WatchBeam/interactive-sdk-cpp' target='_blank') GitHub]
            td #[a(href='/reference/interactive/cplusplus/index.html' target='_blank') Reference Docs]
            td Integrate directly into a C++ Game.
        tr
            td Unity
            td #[a(href='https://github.com/WatchBeam/interactive-unity-plugin/releases/tag/v0.1.0-alpha') GitHub]
            td
                span #[a(href='/reference/interactive/csharp/index.html' target='_blank') Reference Docs]
                br
                span #[a(href='https://github.com/WatchBeam/interactive-unity-plugin/wiki/Getting-started' target='_blank') Getting Started]
            td Prototype Quickly or integrate into a Unity based Game.

    p Once you've chosen an SDK from the above list, download it from its repository and get it setup in your favorite IDE and ready to go.

    h3#creating-an-interactive-project Creating an Interactive Project
    p Interactive projects are created and configured in the #[a(href='https://beam.pro/i/studio' target='_blank') Interactive Studio]. To create a new project visit the #[a(href='https://beam.pro/i/studio' target='_blank') studio] and click on the plus button:

    .figure
        img(src='/img/reference/interactive/studio/createNewProject.png' alt='Screenshot showing the location of the create new project button')
    p.caption Screenshot showing the location of the create new project button.

    p You'll then be prompted to enter a name for your project. Once a name is entered you'll be taken to the Project Editor.

    p The project editor contains tabs where each tab is a step in the creation of your project.
    .figure
        img(src='/img/reference/interactive/studio/editorTabs.png' alt='studio editor tabs')
    p The steps are:
    ul
        li Info - Edit the project name and Metadata about it.
        li Build - Configure Scenes and Controls.
        li Code - Hook your Game Client up to the Project and get coding.
        li Publish - Submit your project for review by the Beam team.
    h3#the-info-step The Info Step
    p The info step is your opportunity to describe your project and provide potential users with all the information they need to get up and running.
    p It is important to describe what your project does and how to install it in a clear and concise way so that users understand what you have developed and how to use it. Be sure to include some information on how users can get ahold of you if they need help or have found a bug.
    p During the pre-publish review the Beam team will examine your project closely to gain an understanding of what your project does, so be as thorough as possible.

    h3#the-build-step The Build Step

    p The build step is where you design your scenes and controls for your project. The interface is divided up in to three areas:
    ul
        li Scenes
        li Controls
        li Grid

    h4#scenes-area Scenes Area

    p This is where you will manage the scenes for your project. Scenes can be created, renamed, or deleted here. You can also select the current scene that you would like to manage controls for.

    .figure
        img(src='/img/reference/interactive/studio/scenes.png' alt='studio scenes')

    h4#controls-area Controls Area

    p This is where you will manage the controls for the scenes in your project. Controls can be created, renamed, have their type (button or joystick) changed, spark cost adjusted, or deleted.

    .figure
        img(src='/img/reference/interactive/studio/controls.png' alt='studio controls')

    h4#grid-area Grid Area

    p The grid is how you specify the layout of your controls for the scene. There are three different layouts for which you can set the look of the scene: small (mobile phones), medium (tablets), and large (desktops). These different layouts are indicated by icons in the upper left area of the grid section.

    p To add a control to the grid, click and drag the control from the Controls section on to the Grid section. Once the control has been added to the grid you have the ability to resize, reposition, or remove the control.

    p For more detail on the configuration of the controls on the scene, the #[code View JSON] option in the top right of the grid section will display the relevant JSON for the scene.
    p Once you are finished building your scenes/controls, press the Save button in the top right of the grid section.

    .figure
        img(src='/img/reference/interactive/studio/grid_with_controls.png' alt='studio grid')

    h3#the-code-step The Code Step
    p With your projects scenes and controls set up, now it is time to complete the code portion of your project. You will need to write your own Game Client that will connect to the Interactive service.

    p Grab your #[code Project Version ID] from the code step displayed in the center of the screen and then utilize the documentation and samples from your #[a(href='#choosing-an-sdk-environment') chosen SDK] and get creating.

    h3#publish-step The Publish Step
    p The final step in the studio is Publish. Publish allows you to share your project with everyone on Beam.

    p Before considering if an Interactive project is ready for publishing a series of questions should be asked.

    ul
        li Is this project something that everyone would use?
        li Is this project ready for every Beam broadcaster to have access to?
        li Is the info tab filled in with #[strong detailed] installation and setup instructions?

    p If the answer to any of these is no, then the project should #[strong not] be published. For cases where the project would suit being shared with a smaller group of users, it can be #[a(href='#sharing-your-project') shared] instead.

    h4#publishing-flow Publishing Flow
    .figure
        img(src='/img/reference/interactive/studio/PublishProcess.svg' alt='studio pubish process')
    p A Project starts off in the draft state. In this state, you can freely make edits to it and test and share it with other users. Many projects don't leave the draft state. It's perfectly ok not to publish your project.

    p Once you've decided to publish your project, visit the publish tab in the interactive studio. It will perform some checks on the project to ensure that it meets some basic requirements before allowing you to submit the project.
    p Once submitted the Interactive review team at Beam are notified and will begin a review. While a project is in review you won't be able to edit the project. A Beam representative may also reach out to you with questions.
    p After a review is conducted, your project will either be accepted for publishing or denied and returned the draft state with feedback on what would need to change to get the project to a publishable state.
    p Should your project be accepted, a date can be discussed with the Beam team and the developers of the project. On this date, the project will be made available for all Beam users in our Interactive Store.

    h3#sharing-your-project Sharing an Interactive Project
    p By default only the project's owner can use a project in a broadcast. However if you'd like other beam broadcasters to use it, then you have several options.

    p To manage a project's share settings click the share button in the top right of the editor.
    .figure
        img(src='/img/reference/interactive/studio/share/shareButton.png' alt='studio share button')
    p A dialog will be presented with three options. #[strong Changing the sharing settings of a project will delete any previous share settings]

    p The first is the default and only lets the project owner use the project in a broadcast.

    h4#share-codes Share Codes
    p The second, “Anyone with the versionId and code can play”, option generates a share code. This code can be handed out to broadcasters who wants to use the project in their broadcasts. These broadcasters, provide it to the Game Client which can then gain access to use the project.
    .figure
        img(src='/img/reference/interactive/studio/share/shareCode.png' alt='studio share code')
    h4#explicit-sharing Explicit Sharing

    p The third option, “Only allow specific users to play until published”, is explicit sharing it lets you share the project with named Beam users. Only users in the list can use the project. To share a project with a user search for their username in the search box and then click add.
    .figure
        img(src='/img/reference/interactive/studio/share/explicitSharing.png' alt='studio explicit sharing')

    h2#protocol-overview Protocol Overview

    p Beam's Interactive protocol is defined in a separate #[a(href='/reference/interactive/protocol/protocol.pdf' target='_blank') downloadable document] that has precise implementation details. This section provides an introduction to the protocol.

    h3#wire-format Wire Format
    p The Interactive Service communicates using a protocol similar to #[a(href='http://jsonrpc.org/historical/json-rpc-1-2-proposal.html') JSON-RPC] except that it is bi-directional. Clients and Servers can both call and respond to methods.

    p The protocol operates over a standard WebSocket connection. Both #[a(href='#participants') Participants] and #[a(href='#the-gameclient') Game Clients] use the same protocol definition, but different subsets of methods are available to each.

    h3#packets Packets
    p The protocol contains two types of packets: #[code methods] and #[code replies].

    h4#method Method
    p A method is a request for a connected entity to perform an operation. Methods are sent by both the client and the server. When a method is received, it is processed and acknowledged by the recipient, who can then reply to the method with a result or an error.

    p A method can contain parameters which get provided to the recipient.

    p Methods contain an additional property called #[code discard] which when true indicates that the recipient can choose not to respond. Methods that can be treated as events have the #[code discard] property set to true.

    h4#reply Reply
    p A reply is sent from a recipient back to the caller to indicate the result of executing that method. It can contain a #[code result] or an #[code error] which indicates what went wrong.

    p For full packet implementation details please refer to the protocol specification which you can download #[a(href='/reference/interactive/protocol/protocol.pdf' target='_blank') here].

    h3#compression Compression
    p By default packets on the wire are transmitted as plaintext, but the Game Client can opt to use #[a(href='https://tools.ietf.org/html/rfc1952' target='_blank') GZIP] or #[a(href='https://lz4.github.io/lz4/' target='_blank') LZ4] compression. To do this, the Game Client must call a method providing its supported compression formats. The server will then respond with its chosen compression format.

    h3#authentication Authentication
    p A Game Client needs to authenticate as a Beam user when establishing an interactive session. Two authentication methods are available.

    h4(id='oauth-2.0') OAuth 2.0
    p Beam supports #[a(href='https://tools.ietf.org/html/rfc6749' target='_blank') OAuth 2.0] flows which enable you to get a valid #[a(href='https://tools.ietf.org/html/rfc6750' target='_blank') OAuth 2.0 Bearer] token. Tokens can be passed in the #[code Authorization] header when you initiate a connection to the interactive service.

    p The only required scope for an interactive connection is #[code interactive:robot:self]. For more information about Beam's OAuth visit the #[a(href='/reference/oauth/index.html' target='_blank') OAuth reference page].

    h4#xtoken XToken
    p You can provide an XBL XToken in the #[code Authorization] header when you initiate a connection to the interactive service. This authentication method is leveraged for Universal Windows Platform applications that are Xbox Live enabled, as well as games on Xbox One

    h2#where-to-get-help Where to get help
    p Have questions? Stuck? We're here to help! We have places you can get help so drop by!
    ul
        li
            p #[a(href='gitter.im/WatchBeam/developers' target='_blank') Gitter] - Chat with our team and other developers.
        li
            p #[a(href='https://forums.beam.pro/category/10/developer-discussion' target='_blank') Forums]  - Post a topic, and we'll get back to you.
        li
            p #[a(href='https://discord.gg/beam' target='_blank') Community Discord] - Hang out with other developers in our community Discord.
