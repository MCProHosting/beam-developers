{
  "api": [
    {
      "name": "InteractiveParticipant",
      "index": "0",
      "description": "This class represents a user who is currently viewing a Mixer interactivity stream. This user (also known as a Participant) can have both a Mixer account and a Microsoft Security Account (MSA).",
      "type": "Class",
      "syntax": {
        "code": "public class InteractiveParticipant"
      },
      "constructor_class": [
        {
          "code": " public class InteractiveParticipant()",
          "description": "Creates the Mixer participant class.",
          "name": "InteractiveParticipant()"
        }
      ],
      "properties": [
        {
          "code": "public uint Level { get; }",
          "description": "Gets the Mixer level of the user.",
          "name": "Level",
          "property_type": "uint",
          "property_description": "The Mixer level of the user."
        },
        {
          "code": "public uint UserID { get; }",
          "description": "Gets the Mixer ID of the user.",
          "name": "UserID",
          "property_type": "uint",
          "property_description": "The Mixer ID of the user."
        },
        {
          "code": "public string UserName { get; }",
          "description": "Gets the Mixer username of the user.",
          "name": "UserName",
          "property_type": "string",
          "property_description": "The Mixer username of the user."
        },
        {
          "code": "public InteractiveGroup Group { get; }",
          "description": "Gets the group the participant is in. By default, participants are placed in a group named \"default\".",
          "name": "Group",
          "property_type": "InteractiveGroup",
          "property_description": "The group that the participant is in."
        },
        {
          "code": "public DateTime ConnectedAt { get; }",
          "description": "Gets the time (in UTC) at which the user connected to the Mixer interactivity stream.",
          "name": "ConnectedAt",
          "property_type": "DateTime",
          "property_description": "The time (in UTC) at which the user connected to the Mixer interactivity stream."
        },
        {
          "code": "public DateTime LastInputAt { get; }",
          "description": "Gets the time (in UTC) at which the user last used the interactivity control input.",
          "name": "LastInputAt",
          "property_type": "DateTime",
          "property_description": "The time (in UTC) at which the user last used the interactivity control input."
        },
        {
          "code": "public bool InputDisabled { get; }",
          "description": "Gets the value that indicates whether or not the user input is disabled.",
          "name": "InputDisabled",
          "property_type": "bool",
          "property_description": "Boolean value that indicates whether or not the user input is disabled. If TRUE, user input has been disabled."
        },
        {
          "code": "public InteractiveParticipantState State { get; }",
          "description": "Gets the participant's current state.",
          "name": "State",
          "property_type": "InteractiveParticipantState",
          "property_description": "The participant's current state."
        },
        {
          "code": "public IList<string> Buttons { get; }",
          "description": "Gets the control IDs of all the buttons this participant has interacted with.",
          "name": "Buttons",
          "property_type": "IList<string>",
          "property_description": "Array of button control IDs."
        },
        {
          "code": "public IList<string> Joysticks { get; }",
          "description": "Gets the control IDs of all the joystick controls this participant has interacted with.",
          "name": "Joysticks",
          "property_type": "IList<string>",
          "property_description": "Array of joystick control IDs."
        }
      ]
    },
    {
      "name": "InteractiveScene",
      "index": "1",
      "description": "Represents a Mixer interactivity scene. These scenes are configured using the Mixer Interactive Studio.",
      "type": "Class",
      "syntax": {
        "code": "public class InteractiveScene"
      },
      "properties": [
        {
          "code": "public string SceneID { get; }",
          "description": "Gets the unique string identifier for the scene.",
          "name": "SceneID",
          "property_type": "string",
          "property_description": "The unique string identifier for the scene."
        },
        {
          "code": "public IList<InteractiveButtonControl> Buttons { get; }",
          "description": "Gets all the buttons in the scene. This list may be empty.",
          "name": "Buttons",
          "property_type": "IList<InteractiveControl>",
          "property_description": "All the buttons in the scene."
        },
        {
          "code": "public IList<InteractiveJoystickControl> Joysticks { get; }",
          "description": "Gets all the joystick controls in the scene. This list may be empty.",
          "name": "Joysticks",
          "property_type": "IList<InteractiveControl>",
          "property_description": "All the joystick controls in the scene."
        },
        {
          "code": "public IList<InteractiveGroup> Groups { get; }",
          "description": "Gets all the groups that are assigned to this scene.",
          "name": "Groups",
          "property_type": "IList<InteractiveControl>",
          "property_description": "All the groups in the scene."
        }
      ],
      "methods": [
        {
          "code": "public InteractiveButtonControl GetButton(string controlID)",
          "description": "Gets a button control based on its ID, if it exists.",
          "name": "GetButton(string)",
          "return_type": "InteractiveButtonControl",
          "return_description": "The button object.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        },
        {
          "code": "public InteractiveJoystickControl GetJoystick(string controlID)",
          "description": "Gets a joystick control based on its ID, if it exists.",
          "name": "GetJoystick(string)",
          "return_type": "InteractiveJoystickControl",
          "return_description": "The joystick object.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        }
      ]
    },
    {
      "name": "InteractivityManager",
      "index": "2",
      "description": "The manager service class that handles the Mixer interactivity event experience between Mixer service and the title.",
      "type": "Class",
      "syntax": {
        "code": "public class InteractivityManager"
      },
      "constructor_class": [
        {
          "code": " public class InteractivityManager()",
          "description": "Creates the Mixer interactivity manager class.",
          "name": "InteractivityManager()"
        }
      ],
      "properties": [
        {
          "code": "public static InteractivityManager SingletonInstance { get; }",
          "description": "Gets the singleton instance of the Mixer interactivity manager.",
          "name": "SingletonInstance",
          "property_type": "InteractivityManager",
          "property_description": "The singleton instance of the Mixer interactivity manager."
        },
        {
          "code": "public LoggingLevel LoggingLevel { get; }",
          "description": "Gets the level of information in the diagnostic output provided by the Mixer SDK.",
          "name": "LoggingLevel",
          "property_type": "LoggingLevel",
          "property_description": "The level of information provided in the logs."
        },
        {
          "code": "public InteractivityState InteractivityState { get; }",
          "description": "Gets the interactivity state of the Mixer interactivity manager.",
          "name": "IsInteractive",
          "property_type": "string",
          "property_description": "The interactivity state of the Mixer interactivity manager."
        },
        {
          "code": "public IList<InteractiveGroup> Groups { get; }",
          "description": "Gets all the groups associated with the current interactivity instance. Will be empty if initialization is not complete.",
          "name": "Groups",
          "property_type": "IList<InteractiveGroup>",
          "property_description": "All the groups."
        },
        {
          "code": "public IList<InteractiveScene> Scenes { get; }",
          "description": "Gets all the scenes associated with the current interactivity instance. An empty list is returned if initialization is not completed.",
          "name": "Scenes",
          "property_type": "IList<InteractiveScene>",
          "property_description": "All the scenes."
        },
        {
          "code": "public IList<InteractiveParticipant> Participants { get; }",
          "description": "Gets all the participants.",
          "name": "Participants",
          "property_type": "IList<InteractiveParticipant>",
          "property_description": "All the participants."
        },
        {
          "code": "public IList<InteractiveButtonControl> Buttons { get; }",
          "description": "Gets all button controls.",
          "name": "Buttons",
          "property_type": "IList<InteractiveButtonControl>",
          "property_description": "All button controls."
        },
        {
          "code": "public IList<InteractiveJoystickControl> Joysticks { get; }",
          "description": "Gets all joystick controls.",
          "name": "Joysticks",
          "property_type": "IList<InteractiveJoystickControl>",
          "property_description": "All joystick controls."
        },
        {
          "code": "public string ShortCode { get; }",
          "description": "Gets the string code that the broadcaster inputs on the Mixer website to authorize the interactivity session.",
          "name": "ShortCode",
          "property_type": "string",
          "property_description": "The string code used for authorization."
        }
      ],
      "methods": [
        {
          "code": "public InteractiveGroup GetGroup(string groupID)",
          "description": "Gets a specific group. Returns NULL if initialization is not yet completed or if the group does not exist.",
          "name": "GetGroup(string groupID)",
          "return_type": "InteractiveGroup",
          "return_description": "The group object.",
          "params": [
            {
              "param_name": "groupID",
              "param_type": "string",
              "param_description": "The unique string identifier of the group."
            }
          ]
        },
        {
          "code": "public InteractiveScene GetScene(string sceneID)",
          "description": "Gets a specific scene. Returns NULL if initialization is not yet completed or if the group does not exist.",
          "name": "GetScene(string sceneID)",
          "return_type": "InteractiveScene",
          "return_description": "The scene object.",
          "params": [
            {
              "param_name": "sceneID",
              "param_type": "string",
              "param_description": "The unique string identifier of the scene."
            }
          ]
        },
        {
          "code": "public void Initialize(bool goInteractive = true)",
          "description": "Sets up connection to the Mixer interactivity service by initializing a background task.",
          "name": "Initialize(bool)",
          "params": [
            {
              "param_name": "goInteractive",
              "param_type": "bool",
              "param_description": "Value that indicates whether interactivity should start after initialization. If TRUE, the stream enters into interactivity after initialization. This value defaults to TRUE."
            }
          ]
        },
        {
          "code": "public void TriggerCooldown(string controlID, int cooldown)",
          "description": "Disables a specified control for a period of time.",
          "name": "TriggerCooldown(string, int)",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control to disable."
            },
            {
              "param_name": "cooldown",
              "param_type": "int",
              "param_description": "The cooldown duration (in milliseconds)."
            }
          ]
        },
        {
          "code": "public void StartInteractive()",
          "description": "Used by the title to inform the Mixer service that it is ready to receive interactivity input. Returns a soft failure if initialization has not yet been completed. Returns a descriptive error message if initialization fails.",
          "name": "StartInteractive()"
        },
        {
          "code": "public void StopInteractive()",
          "description": "Used by the title to inform the Mixer service that it is no longer receiving interactivity input.",
          "name": "StopInteractive()"
        },
        {
          "code": "public void DoWork()",
          "description": "Manages and maintains proper state updates between the title and the Mixer Service. To ensure best performance, DoWork() must be called frequently, such as once per frame. Title needs to be thread safe when calling DoWork() since this is when states are changed.",
          "name": "DoWork()"
        },
        {
          "code": "public void Dispose()",
          "description": "Closes the web socket and free the resources used by Mixer interactivity manager.",
          "name": "Dispose()"
        },
        {
          "code": "public void SendMockWebSocketMessage(string rawText)",
          "description": "Sends the specified text message as a mock web socket message.",
          "name": "SendMockWebSocketMessage(string)",
          "params": [
            {
              "param_name": "rawText",
              "param_type": "string",
              "param_description": "The text message to send."
            }
          ]
        },
        {
          "code": "public InteractiveButtonControl GetButton(string controlID)",
          "description": "Gets a button control object by ID.",
          "name": "GetButton(string)",
          "return_type": "InteractiveButtonControl",
          "return_description": "The button object.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        },
        {
          "code": "public InteractiveJoystickControl GetJoystick(string controlID)",
          "description": "Gets a joystick control object by ID.",
          "name": "GetJoystick(string)",
          "return_type": "InteractiveJoystickControl",
          "return_description": "The joystick object.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        }
      ]
    },
    {
      "name": "InteractiveEventArgs",
      "index": "3",
      "description": "Base class for all Mixer interactivity events. Contains info about the event. Mixer interactivity is an event-driven service.",
      "type": "Class",
      "syntax": {
        "code": "public class InteractiveEventArgs"
      },
      "constructor_class": [
        {
          "code": "public InteractiveEventArgs()",
          "description": "Creates the interactive event args class.",
          "name": "InteractiveEventArgs()"
        }
      ],
      "properties": [
        {
          "code": "public DateTime Time { get; }",
          "description": "Gets the time (in UTC) when this event is raised.",
          "name": "time()",
          "property_type": "DateTime",
          "property_description": "The time (in UTC)."
        },
        {
          "code": "public int ErrorCode { get; }",
          "description": "Gets the error code indicating the result of the operation.",
          "name": "ErrorCode",
          "property_type": "int",
          "property_description": "The error code."
        },
        {
          "code": "public string ErrorMessage { get; }",
          "description": "Gets call-specific error message with debug information. Message is not localized as it is meant to be used for debugging only.",
          "name": "ErrorMessage",
          "property_type": "string",
          "property_description": "The error message."
        },
        {
          "code": "public InteractiveEventType EventType { get; }",
          "description": "Gets the type of event raised.",
          "name": "EventType",
          "property_type": "InteractiveEventType",
          "property_description": "The type of event raised."
        }
      ]
    },
    {
      "name": "InteractiveButtonEventArgs",
      "index": "6",
      "description": "Contains information for a button event.",
      "type": "Class",
      "syntax": {
        "code": "public class InteractiveButtonEventArgs"
      },
      "properties": [
        {
          "code": "public string ControlID { get; }",
          "description": "Gets the unique string identifier for this control.",
          "name": "ControlID",
          "property_type": "string",
          "property_description": "The unique string identifier for this control."
        },
        {
          "code": "public InteractiveParticipant Participant { get; }",
          "description": "Gets the user who triggered this event.",
          "name": "Participant",
          "property_type": "InteractiveParticipant",
          "property_description": "The user who triggered this event."
        },
        {
          "code": "public bool IsPressed { get; }",
          "description": "Get the value that indicates whether the button is pressed down or not. Returns TRUE if button is pressed down.",
          "name": "IsPressed",
          "property_type": "bool",
          "property_description": "Value that indicates whether the button is down or not."
        }
      ]
    },
    {
      "name": "InteractiveJoystickEventArgs",
      "index": "7",
      "description": "Contains information for a joystick event. These events are sent at an interval frequency configured via the Mixer Interactive Studio.",
      "type": "Class",
      "syntax": {
        "code": "public class InteractiveJoystickEventArgs"
      },
      "properties": [
        {
          "code": "public string ControlID { get; }",
          "description": "Gets the unique string identifier for this control.",
          "name": "ControlID",
          "property_type": "string",
          "property_description": "The unique string identifier for this control."
        },
        {
          "code": "public double X { get; }",
          "description": "Gets the X coordinate of the joystick, in the range of [-1, 1].",
          "name": "X",
          "property_type": "double",
          "property_description": "The X coordinate of the joystick."
        },
        {
          "code": "public double Y { get; }",
          "description": "Gets the Y coordinate of the joystick, in the range of [-1, 1].",
          "name": "Y",
          "property_type": "double",
          "property_description": "The Y coordinate of the joystick."
        },
        {
          "code": "public InteractiveParticipant Participant { get; }",
          "description": "Gets the user who raised this event.",
          "name": "Participant",
          "property_type": "InteractiveParticipant",
          "property_description": "The user who raised this event."
        }
      ]
    },
    {
      "name": "MixerDialog",
      "index": "8",
      "description": "Represents a custom Mixer dialog box to display the short code used for authenticating the Mixer service in Unity.",
      "type": "Class",
      "syntax": {
        "code": "public class MixerDialog"
      },
      "methods": [
        {
          "code": "public void Show(string shortCode)",
          "description": "Display the code dialog box on screen.",
          "name": "Show(string)",
          "params": [
            {
              "param_name": "shortCode",
              "param_type": "string",
              "param_description": "The identifier code for the dialog box."
            }
          ]
        },
        {
          "code": "public void Hide(string shortCode)",
          "description": "Hide the code dialog box.",
          "name": "Hide(string)",
          "params": [
            {
              "param_name": "shortCode",
              "param_type": "string",
              "param_description": "The identifier code for the dialog box."
            }
          ]
        }
      ]
    },
    {
      "name": "InteractiveControl",
      "index": "9",
      "description": "Base class for all Mixer interactivity controls. All controls are created and configured using the Mixer Interactive Studio.",
      "type": "Class",
      "syntax": {
        "code": "public class InteractiveControl"
      },
      "properties": [
        {
          "code": "public string ControlID { get; }",
          "description": "Gets the unique string identifier for this control.",
          "name": "ControlId",
          "property_type": "string",
          "property_description": "The unique string identifier for this control."
        },
        {
          "code": "public bool Disabled { get; }",
          "description": "Gets the value that indicates whether the control is enabled or disabled.",
          "name": "Disabled",
          "property_type": "bool",
          "property_description": "Boolean value that indicates whether the control is enabled or disabled. If TRUE, control is disabled."
        },
        {
          "code": "public string HelpText { get; }",
          "description": "Gets the help text that displays when a participant hovers over the control.",
          "name": "HelpText",
          "property_type": "string",
          "property_description": "The help text."
        }
      ],
      "methods": [
        {
          "code": "public void SetDisabled(bool disabled)",
          "description": "Function to enable or disable this control.",
          "name": "SetDisabled(bool)",
          "params": [
            {
              "param_name": "disabled",
              "param_type": "bool",
              "param_description": "Boolean value to enable or disable the control. Set this value to TRUE to disable the control."
            }
          ]
        }
      ]
    },
    {
      "name": "InteractiveGroup",
      "index": "10",
      "description": "Represents a Mixer Interactivity group. This group functionality is used to segment your audience watching a stream. InteractiveGroup is useful when you want groups of your audience to be shown a different scene while watching a stream. In a scenario where you want the same scene to be shown to multiple groups, you need to ensure that each participant is only in a single group.",
      "type": "Class",
      "syntax": {
        "code": "public class InteractiveGroup"
      },
      "properties": [
        {
          "code": "public string GroupID { get; }",
          "description": "Gets the unique string identifier for this group.",
          "name": "GroupID",
          "property_type": "string",
          "property_description": "The unique string identifier."
        },
        {
          "code": "public string SceneID { get; }",
          "description": "Gets the scene shown to this group.",
          "name": "SceneID",
          "property_type": "string",
          "property_description": "The scene shown to this group."
        }
      ],
      "methods": [
        {
          "code": "public void SetScene(string sceneID)",
          "description": "Function to set the scene assigned for this group to the specified scene ID.",
          "name": "SetScene(string)",
          "params": [
            {
              "param_name": "sceneID",
              "param_type": "string",
              "param_description": "String value that specifies the target scene to set for the group."
            }
          ]
        }
      ]
    },
    {
      "name": "InteractiveButtonControl",
      "index": "11",
      "description": "Represents a Mixer interactivity button control. This class is derived from InteractiveControl. All controls are created and configured using the Mixer Interactive Studio.",
      "type": "Class",
      "syntax": {
        "code": "public class InteractiveButtonControl"
      },
      "properties": [
        {
          "code": "public string ButtonText { get; }",
          "description": "Gets the text displayed on the button control.",
          "name": "ButtonText",
          "property_type": "string",
          "property_description": "The text displayed on the button control."
        },
        {
          "code": "public uint Cost { get; }",
          "description": "Gets the spark cost assigned to the button control.",
          "name": "Cost",
          "property_type": "uint",
          "property_description": "The spark cost."
        },
        {
          "code": "public int RemainingCooldown { get; }",
          "description": "Gets the time remaining (in milliseconds) before this button can be clicked again.",
          "name": "RemainingCooldown",
          "property_type": "int",
          "property_description": "The time remaining (in milliseconds)."
        },
        {
          "code": "public float Progress { get; }",
          "description": "Gets the current progress of this button control.",
          "name": "Progress",
          "property_type": "float",
          "property_description": "Current progress."
        },
        {
          "code": "public bool ButtonDown { get; }",
          "description": "Indicates whether the button has transitioned from up to down since the last call to DoWork().",
          "name": "ButtonDown",
          "property_type": "bool",
          "property_description": "Value that indicates whether the button has transitioned from up to down."
        },
        {
          "code": "public bool ButtonPressed { get; }",
          "description": "Indicates whether the button is pressed since the last call to DoWork().",
          "name": "ButtonPressed",
          "property_type": "bool",
          "property_description": "Value that indicates whether the button is pressed."
        },
        {
          "code": "public bool ButtonUp { get; }",
          "description": "Indicates whether the button has transitioned from down to up since the last call to DoWork().",
          "name": "ButtonUp",
          "property_type": "bool",
          "property_description": "Value that indicates whether the button has transitioned from down to up."
        },
        {
          "code": "public uint CountOfButtonDowns { get; }",
          "description": "Gets the number of button downs since the last call to DoWork().",
          "name": "CountOfButtonDowns",
          "property_type": "uint",
          "property_description": "The number of button downs."
        },
        {
          "code": "public uint CountOfButtonPresses { get; }",
          "description": "Gets the number of button presses since the last call to DoWork().",
          "name": "CountOfButtonPresses",
          "property_type": "uint",
          "property_description": "The number of button presses."
        },
        {
          "code": "public uint CountOfButtonUps { get; }",
          "description": "Gets the number of button ups since the last call to DoWork().",
          "name": "CountOfButtonUps",
          "property_type": "uint",
          "property_description": "The number of button ups."
        }
      ],
      "methods": [
        {
          "code": "public void SetProgress(float progress)",
          "description": "Sets the progress value for this button control.",
          "name": "SetProgress(float)",
          "params": [
            {
              "param_name": "progress",
              "param_type": "float",
              "param_description": "The progress value, in the range of 0.0 to 1.0."
            }
          ]
        },
        {
          "code": "public bool GetButtonDown(uint userID)",
          "description": "Returns TRUE if the specified participant has triggered a button down since the last call to DoWork().",
          "name": "GetButtonDown(uint)",
          "return_type": "bool",
          "return_description": "Value that indicates if the button is down or not.",
          "params": [
            {
              "param_name": "userId",
              "param_type": "uint",
              "param_description": "The unique identifier of the participant."
            }
          ]
        },
        {
          "code": "public bool GetButtonPressed(uint userID)",
          "description": "Returns TRUE if the specified participant has triggered a button press since the last call to DoWork().",
          "name": "GetButtonPressed(uint)",
          "return_type": "bool",
          "return_description": "Value that indicates if the button has been pressed or not.",
          "params": [
            {
              "param_name": "userId",
              "param_type": "uint",
              "param_description": "The unique identifier of the participant."
            }
          ]
        },
        {
          "code": "public bool GetButtonUp(uint userID)",
          "description": "Returns TRUE if the specified participant has triggered a button up since the last call to DoWork().",
          "name": "GetButtonUp(uint)",
          "return_type": "bool",
          "return_description": "Value that indicates if the button is up or not.",
          "params": [
            {
              "param_name": "userId",
              "param_type": "uint",
              "param_description": "The unique identifier of the participant."
            }
          ]
        },
        {
          "code": "public uint GetCountOfButtonDowns(uint userID)",
          "description": "Returns the number of button downs from the specified participant since the last call to DoWork()",
          "name": "GetCountOfButtonDowns(uint)",
          "return_type": "uint",
          "return_description": "The number of button downs.",
          "params": [
            {
              "param_name": "userId",
              "param_type": "uint",
              "param_description": "The unique identifier of the participant."
            }
          ]
        },
        {
          "code": "public uint GetCountOfButtonPresses(uint userID)",
          "description": "Returns the number of button presses from the specified participant since the last call to DoWork()",
          "name": "GetCountOfButtonPresses(uint)",
          "return_type": "uint",
          "return_description": "The number of button presses.",
          "params": [
            {
              "param_name": "userId",
              "param_type": "uint",
              "param_description": "The unique identifier of the participant."
            }
          ]
        },
        {
          "code": "public uint GetCountOfButtonUps(uint userID)",
          "description": "Returns the number of button ups from the specified participant since the last call to DoWork()",
          "name": "GetCountOfButtonUps(uint)",
          "return_type": "uint",
          "return_description": "The number of button ups.",
          "params": [
            {
              "param_name": "userId",
              "param_type": "uint",
              "param_description": "The unique identifier of the participant."
            }
          ]
        }
      ]
    },
    {
      "name": "InteractiveJoystickControl",
      "index": "12",
      "description": "Represents a Mixer interactivity joystick control. This class is derived from InteractiveControl. All controls are created and configured using the Mixer Interactive Studio.",
      "type": "Class",
      "syntax": {
        "code": "public class InteractiveJoystickControl"
      },
      "constructor_class": [
        {
          "code": "public InteractiveJoystickControl(string controlID, bool enabled, string helpText, string eTag, string sceneID)",
          "description": "Creates the joystick control class.",
          "name": "InteractiveJoystickControl(string, bool, string, string, string)"
        }
      ],
      "properties": [
        {
          "code": "public double X { get; }",
          "description": "Gets the current X coordinate of the joystick, in the range of [-1, 1].",
          "name": "X",
          "property_type": "double",
          "property_description": "The current X coordinate of the joystick."
        },
        {
          "code": "public double Y { get; }",
          "description": "Gets the current Y coordinate of the joystick, in the range of [-1, 1].",
          "name": "Y",
          "property_type": "double",
          "property_description": "The current Y coordinate of the joystick."
        },
        {
          "code": "public double Intensity { get; }",
          "description": "Gets the current intensity of the joystick control, in the range of [0, 1].",
          "name": "Intensity",
          "property_type": "double",
          "property_description": "The current intensity of the joystick."
        }
      ],
      "methods": [
        {
          "code": "public double GetX(uint userID)",
          "description": "Gets the X coordinate of the joystick for a particular Mixer participant since the last DoWork() call.",
          "name": "GetX(uint)",
          "params": [
            {
              "param_name": "userID",
              "param_type": "uint",
              "param_description": "The unique identifier of the Mixer participant."
            }
          ]
        },
        {
          "code": "public double GetY(uint userID)",
          "description": "Gets the Y coordinate of the joystick for a particular Mixer participant since the last DoWork() call.",
          "name": "GetY(uint)",
          "params": [
            {
              "param_name": "userID",
              "param_type": "uint",
              "param_description": "The unique identifier of the Mixer participant."
            }
          ]
        }
      ]
    },
    {
      "name": "LoggingLevel",
      "index": "13",
      "description": "Describes the various levels of logging configuration provided by the Mixer SDK.",
      "type": "Enum",
      "syntax": {
        "code": "public enum LoggingLevel"
      },
      "enums": [
        {
          "name": "None",
          "description": "No debug output."
        },
        {
          "name": "Minimal",
          "description": "Only errors and warnings."
        },
        {
          "name": "Verbose",
          "description": "All events, including every websocket and HTTP message."
        }
      ]
    },
    {
      "name": "InteractiveEventType",
      "index": "14",
      "description": "Describes the types of interactive events.",
      "type": "Enum",
      "syntax": {
        "code": "public enum InteractiveEventType"
      },
      "enums": [
        {
          "name": "Error",
          "description": "This event is raised when the service or manager encounters an error. The Error and ErrorMessage members will contain pertinent info."
        },
        {
          "name": "InteractivityStateChanged",
          "description": "This event is raised when the interactivity state of the Mixer interactivity manager has changed."
        },
        {
          "name": "ParticipantStateChanged",
          "description": "This event is raised when a participant's state changes. For example, when the participant joins, leaves, or has input disabled."
        },
        {
          "name": "Button",
          "description": "This event is raised when there's button input."
        },
        {
          "name": "Joystick",
          "description": "This event is raised when there's joystick input."
        }
      ]
    },
    {
      "name": "InteractivityState",
      "index": "15",
      "description": "Describes the current state of the interactivity service. State transitions available: NotInitialized -> NotInteractive, NotInteractive -> InteractivePending, InteractivePending -> Interactive, Interactive -> NotInteractive",
      "type": "Enum",
      "syntax": {
        "code": "public enum InteractivityState"
      },
      "enums": [
        {
          "name": "NotInitialized",
          "description": "The Mixer interactivity manager is not initialized."
        },
        {
          "name": "Initializing",
          "description": "The Mixer interactivity manager is in the process of initializing."
        },
        {
          "name": "ShortCodeRequired",
          "description": "The Mixer interactivity manager requires the user to be authenticated with the service. User needs to go to the Mixer website to enter a code."
        },
        {
          "name": "Initialized",
          "description": "The Mixer interactivity manager is initialized."
        },
        {
          "name": "InteractivityDisabled",
          "description": "The Mixer interactivity manager is initialized, but interactivity is disabled."
        },
        {
          "name": "InteractivePending",
          "description": "Currently connecting to the interactivity service."
        },
        {
          "name": "Interactive",
          "description": "Interactivity is enabled."
        }
      ]
    },
    {
      "name": "InteractivityStateChangedEventArgs",
      "index": "16",
      "description": "Contains information about the Mixer interactivity manager's latest interactivity state.",
      "type": "Class",
      "syntax": {
        "code": "public class InteractivityStateChangedEventArgs"
      },
      "properties": [
        {
          "code": "public InteractivityState State",
          "description": "Gets the Mixer interactivity manager's latest interactivity state.",
          "name": "State",
          "property_type": "InteractivityState",
          "property_description": "The Mixer interactivity manager's latest interactivity state."
        }
      ]
    },
    {
      "name": "InteractiveParticipantState",
      "index": "17",
      "description": "Describes the current state of the participant.",
      "type": "Enum",
      "syntax": {
        "code": "public enum InteractiveParticipantState"
      },
      "enums": [
        {
          "name": "Joined",
          "description": "The participant joined the channel."
        },
        {
          "name": "Disabled",
          "description": "The participant's input is disabled."
        },
        {
          "name": "Left",
          "description": "The participant left the channel."
        }
      ]
    },
    {
      "name": "InteractiveParticipantStateChangedEventArgs",
      "index": "18",
      "description": "Contains information about the participant's state change event. This event is raised when a participant joins or leaves the Mixer channel.",
      "type": "Class",
      "syntax": {
        "code": "public class InteractiveParticipantStatedChangeEventArgs"
      },
      "properties": [
        {
          "code": "public InteractiveParticipant Participant",
          "description": "Gets the participant whose state has changed. It can be a participant has just joined or left the Mixer channel.",
          "name": "Participant",
          "property_type": "InteractiveParticipant",
          "property_description": "The participant who has just joined the Mixer channel."
        },
        {
          "code": "public InteractiveParticipantState State",
          "description": "Gets the participant's current state.",
          "name": "State",
          "property_type": "InteractiveParticipantState",
          "property_description": "The participant's current state."
        }
      ]
    },
    {
      "name": "MixerInteractive",
      "index": "19",
      "description": "Represents the MixerInteractive class object in Unity. Add this class to your title when you want it to go interactive. This class enables viewers to interact with a game scene made in Unity by managing state changes and event handlers.",
      "type": "Class",
      "syntax": {
        "code": "public class MixerInteractive"
      },
      "properties": [
        {
          "code": "public InteractivityState InteractivityState { get; }",
          "description": "Gets the interactivity state of the Mixer interactivity manager.",
          "name": "IsInteractive",
          "property_type": "string",
          "property_description": "The interactivity state of the Mixer interactivity manager."
        },
        {
          "code": "public IList<InteractiveScene> Scenes { get; }",
          "description": "Gets all the scenes associated with the current interactivity instance.",
          "name": "Scenes",
          "property_type": "IList<InteractiveScene>",
          "property_description": "All the scenes."
        },
        {
          "code": "public IList<InteractiveParticipant> Participants { get; }",
          "description": "Gets all the participants.",
          "name": "Participants",
          "property_type": "IList<InteractiveParticipant>",
          "property_description": "All the participants."
        },
        {
          "code": "public IList<InteractiveButtonControl> Buttons { get; }",
          "description": "Gets all button controls.",
          "name": "Buttons",
          "property_type": "IList<InteractiveButtonControl>",
          "property_description": "All button controls."
        },
        {
          "code": "public IList<InteractiveJoystickControl> Joysticks { get; }",
          "description": "Gets all joystick controls.",
          "name": "Joysticks",
          "property_type": "IList<InteractiveJoystickControl>",
          "property_description": "All joystick controls."
        },
        {
          "code": "public string ShortCode { get; }",
          "description": "Gets the string code that the broadcaster inputs on the Mixer website to authorize the interactivity session.",
          "name": "ShortCode",
          "property_type": "string",
          "property_description": "The string code used for authorization."
        }
      ],
      "methods": [
        {
          "code": "public void Initialize(bool goInteractive = true)",
          "description": "Sets up connection to the Mixer interactivity service by initializing a background task.",
          "name": "Initialize(bool)",
          "params": [
            {
              "param_name": "goInteractive",
              "param_type": "bool",
              "param_description": "Value that indicates whether interactivity should start after initialization. If TRUE, the stream enters into interactivity after initialization. This value defaults to TRUE."
            }
          ]
        },
        {
          "code": "public void TriggerCooldown(string controlID, int cooldown)",
          "description": "Disables a specified control for a period of time.",
          "name": "TriggerCooldown(string, int)",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control to disable."
            },
            {
              "param_name": "cooldown",
              "param_type": "int",
              "param_description": "The cooldown duration (in milliseconds)."
            }
          ]
        },
        {
          "code": "public void StartInteractive()",
          "description": "Used by the title to inform the Mixer service that it is ready to receive interactivity input. Returns a soft failure if initialization has not yet been completed. Returns a descriptive error message if initialization fails.",
          "name": "StartInteractive()"
        },
        {
          "code": "public void StopInteractive()",
          "description": "Used by the title to inform the Mixer service that it is no longer receiving interactivity input.",
          "name": "StopInteractive()"
        },
        {
          "code": "public void DoWork()",
          "description": "Manages and maintains proper state updates between the title and the Mixer Service. To ensure best performance, DoWork() must be called frequently, such as once per frame. Title needs to be thread safe when calling DoWork() since this is when states are changed.",
          "name": "DoWork()"
        },
        {
          "code": "public void Dispose()",
          "description": "Closes the web socket and free the resources used by Mixer interactivity manager.",
          "name": "Dispose()"
        },
        {
          "code": "public void SendMockWebSocketMessage(string rawText)",
          "description": "Sends the specified text message as a mock web socket message.",
          "name": "SendMockWebSocketMessage(string)",
          "params": [
            {
              "param_name": "rawText",
              "param_type": "string",
              "param_description": "The text message to send."
            }
          ]
        },
        {
          "code": "public static bool GetButtonDown(string controlID)",
          "description": "Indicates whether the button is currently pressed down. If TRUE, the button is down.",
          "name": "GetButtonDown(string)",
          "return_type": "bool",
          "return_description": "Value that indicates whether the button is currently pressed down.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        },
        {
          "code": "public static bool GetButton(string controlID)",
          "description": "Indicates whether the button is currently pressed. If TRUE, the button is pressed.",
          "name": "GetButton(string)",
          "return_type": "bool",
          "return_description": "Value that indicates whether the button is currently pressed.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        },
        {
          "code": "public static bool GetButtonUp(string controlID)",
          "description": "Indicates whether the button is currently up. If TRUE, the button is up.",
          "name": "GetButtonDown(string)",
          "return_type": "bool",
          "return_description": "Value that indicates whether the button is currently pressed up.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        },
        {
          "code": "public static uint GetButtonDownCount(string controlID)",
          "description": "Gets the number of buttons with the specified control ID that are pressed down.",
          "name": "GetButtonDownCount(string)",
          "return_type": "uint",
          "return_description": "The number of buttons that are pressed down.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        },
        {
          "code": "public static uint GetButtonCount(string controlID)",
          "description": "Gets the number of buttons with the specified control ID that are pressed.",
          "name": "GetButtonCount(string)",
          "return_type": "uint",
          "return_description": "The number of buttons that are pressed.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        },
        {
          "code": "public static uint GetButtonUpCount(string controlID)",
          "description": "Gets the number of buttons with the specified control ID that are up.",
          "name": "GetButtonUpCount(string)",
          "return_type": "uint",
          "return_description": "The number of buttons that are up.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        },
        {
          "code": "public static float GetJoystickX(string controlID)",
          "description": "Gets the X coordinate of a particular joystick.",
          "name": "GetJoystickX(string)",
          "return_type": "float",
          "return_description": "The X coordinate of a joystick.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        },
        {
          "code": "public static float GetJoystickY(string controlID)",
          "description": "Gets the X coordinate of a particular joystick.",
          "name": "GetJoystickY(string)",
          "return_type": "float",
          "return_description": "The Y coordinate of a joystick.",
          "params": [
            {
              "param_name": "controlID",
              "param_type": "string",
              "param_description": "The unique string identifier of the control."
            }
          ]
        },
        {
          "code": "public static void GoInteractive()",
          "description": "Connects to the Mixer service and informs the service that the Mixer interactivity manager is ready to recieve messages. This method also handles signal authentication events, if necessary.",
          "name": "GoInteractive()"
        },
        {
          "code": "public delegate void OnGointeractiveHandler(object sender, EventArgs e)",
          "description": "The delegate type that defines the set of arguments that are passed to the method that handles the title's interactivity change event.",
          "name": "OnGointeractiveHandler(object, EventArgs)",
          "params": [
            {
              "param_name": "sender",
              "param_type": "object",
              "param_description": "The Mixer interactivity manager."
            },
            {
              "param_name": "e",
              "param_type": "EventArgs",
              "param_description": "Contains information about the title's interactivity."
            }
          ]
        },
        {
          "code": "public delegate void OnErrorEventHandler(object sender, InteractiveEventArgs e)",
          "description": "The delegate type that defines the set of arguments that are passed to the method that handles an error event.",
          "name": "OnErrorEventHandler(object, InteractiveEventArgs)",
          "params": [
            {
              "param_name": "sender",
              "param_type": "object",
              "param_description": "The Mixer interactivity manager."
            },
            {
              "param_name": "e",
              "param_type": "InteractiveEventArgs",
              "param_description": "Contains information about the error event."
            }
          ]
        },
        {
          "code": "public delegate void OnInteractivityStateChangedHandler(object sender, InteractivityStateChangedEventArgs e)",
          "description": "The delegate type that defines the set of arguments that are passed to the method that handles the interactivity state change event.",
          "name": "OnInteractivityStateChangedHandler(object, InteractivityStateChangedEventArgs)",
          "params": [
            {
              "param_name": "sender",
              "param_type": "object",
              "param_description": "The Mixer interactivity manager."
            },
            {
              "param_name": "e",
              "param_type": "InteractivityStateChangedEventArgs",
              "param_description": "Contains information about the interactivity state change event."
            }
          ]
        },
        {
          "code": "public delegate void OnParticipantStateChangedHandler(object sender, InteractiveEventArgs e)",
          "description": "The delegate type that defines the set of arguments that are passed to the method that handles the participant state change event.",
          "name": "OnParticipantStateChangedHandler(object, InteractiveEventArgs)",
          "params": [
            {
              "param_name": "sender",
              "param_type": "object",
              "param_description": "The participant."
            },
            {
              "param_name": "e",
              "param_type": "InteractiveEventArgs",
              "param_description": "Contains information about the participant state change event."
            }
          ]
        },
        {
          "code": "public delegate void OnInteractiveButtonEventHandler(object sender, InteractiveButtonEventArgs e)",
          "description": "The delegate type that defines the set of arguments that are passed to the method that handles the button state change event.",
          "name": "OnInteractiveButtonEventHandler(object, InteractiveButtonEventArgs)",
          "params": [
            {
              "param_name": "sender",
              "param_type": "object",
              "param_description": "The button."
            },
            {
              "param_name": "e",
              "param_type": "InteractiveButtonEventArgs",
              "param_description": "Contains information about the button change event"
            }
          ]
        },
        {
          "code": "public delegate void OnInteractiveJoystickControlEventHandler(object sender, InteractiveJoystickEventArgs e)",
          "description": "The delegate type that defines the set of arguments that are passed to the method that handles the button state change event.",
          "name": "OnInteractiveJoystickControlEventHandler(object, InteractiveJoystickEventArgs)",
          "params": [
            {
              "param_name": "sender",
              "param_type": "object",
              "param_description": "The joystick."
            },
            {
              "param_name": "e",
              "param_type": "InteractiveJoystickEventArgs",
              "param_description": "Contains information about the joystick change event"
            }
          ]
        }
      ]
    }
  ]
}
