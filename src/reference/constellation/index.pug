extends ../reference_layout.pug
include ../../rest/type.pug
include events_table.pug

block title
    | Constellation Reference | Mixer Developers

block navbar
    .navbar-wrapper
        .container
            nav.navbar.navbar-inverse: +navbar()
            h1 Constellation Reference
block menu
    .hidden-print.rest-sidebar(role='complementary')
        nav
            ul.nav.nav-stacked
                li
                    a(href='#introduction') Introduction
                    ul.nav.nav-stacked
                        li: a(href='#introduction__liveloading') Liveloading
                        li: a(href='#introduction__clients') Clients
                li: a(href='#session') Session
                li: a(href='#protocol') Protocol
                li: a(href='#packets') Packets
                li: a(href='#errors') Error Codes
                li
                    a(href='#methods') Methods
                    ul.nav.nav-stacked
                        li: a(href='#methods_livesubscribe') livesubscribe
                        li: a(href='#methods_liveunsubscribe') liveunsubscribe
                li
                    a(href='#events') Events
                    ul.nav.nav-stacked
                        li: a(href='#events_hello') hello
                        li
                            a(href='#events_live') live
                            ul.nav.nav-stacked
                                li: a(href='#events_live_events') Live Event Types

block reference
    .page-header
        h2#introduction Introduction
    p.
        Constellation is a daemon whose purpose is to unite all stateful functions of mixer.com. One of its main features is liveloading, allwoing you to subscribe to events.

    h3#introduction__liveloading Liveloading
    p Liveloading is an event system on Mixer. When models update, users follow channels, or anything else happens that clients might want to be aware of an event is sent. Users must subscribe to #[a(href='#events_live_events') Events] to recieve them.
    p Pro tip: you can view liveloading in-action by #[a(href='http://blittle.github.io/chrome-dev-tools/network/websockets.html' target='_blank') viewing your websocket log] on #[a(href='https://mixer.com' target='_blank') mixer.com].

    .alert.alert-info Want us to call you instead? Check out our #[a(href='/reference/webhooks/index.html') Webhooks] system!

    h4#introduction__liveloading_limits Limits
    p A single IP address can subscribe to up to 1,000,000 events. Beyond this number you will need multiple IP Addresses to receive events.

    h3#introduction__clients Clients
    p A number of clients already support Constellation. Try them out for a jump start into Constellation.
    ul
        li
            strong JavaScript:
            = ' '
            a(href='https://github.com/mixer/carina' target='_blank') Carina
        li
            strong Java:
            = ' '
            a(href='https://github.com/mixer/beam-client-java' target='_blank') beam-client-java
        li
            strong Swift:
            = ' '
            a(href='https://github.com/mixer/beam-client-swift' target='_blank') beam-client-swift

    h2#session Session
    p.
        Users authenticate to Constellation by sending their existing cookies or authentication details in socket headers. No external API are endpoints needed.
    p.
        Users remain connected to Constellation throughout their session. During the session, they may subscribe to events happening on the site and get notifications when those events occur.

    h2#protocol Protocol
    p.
        Constellation is based on JSON-RPC with additional support for an event system. Initially a user connects to #[strong constellation.mixer.com] with a standard WebSocket connection. Aside from standard websocket headers, the following headers may also be passed:
    ul
        li #[code cookie]: may contain the Mixer session cookie. Its presence will cause Constellation to attempt to authenticate the user.
        li #[code authorization]: may contain an OAuth Bearer token to authenticate with for 3rd party apps, rather than using a cookie. This will indicate to Constellation that the user is a bot.
        li
            p.
                #[code x-sec-websocket-protocol]: if set to cnstl-gzip, Constellation may choose to send websocket frames down as binary, gzipped JSON rather than plain text. Passing this is generally handled by websocket clients themselves, and are usually configured by specifying a preferred subprotocol.

            p.
                The client may detect gzipped frames by the fact that they are binary messages and begin with the magic bytes 0x1f and 0x8b as the first and second payload byte, respectively.
        li #[code x-is-bot]: this must be set to true if the client is an automated bot rather than a human user and you are not using an authorization header. Failure to set this may cause the account to be banned.
    h2#packets Packets
    p.
        There are three packet types: #[a(href='#packets_method') method], #[a(href='#packets_reply') reply], and #[a(href='#packets_event') event]. These are sent over the websocket as JSON encoded messages. Messages to the client may be gzipped if x-supports-gzip was passed in the headers, messages sent to Constellation are always allowed to be gzipped.
    h3#packets_method Method
    p.
        Method packets are sent from the client in a way very similar to JSON-RPC. This is the only packet the client may send to the server. A method may look like the following:
    +highlightStr('json','{"type": "method", "method": "divide", "params": {"numerator": 16, "denominator": 4}, "id": 123}')
    ul
        li #[code type] is always set to "method"
        li #[code method] should be the name of the method to call
        li #[code params] should be an object, not an array, of named arguments to pass into the method.
        li #[code id] may be any uint32. It’s included in the reply packet and used to correlate replies from the socket. You should ensure that each request has a unique id within your session.
    h3#packets_reply Reply
    p.
        Reply packets are sent in response to method packets. Replies are always sent in response to methods unless the socket closes before they may be sent. Some reply packets may look like the following:
    +highlightStr('json','{"type": "reply", "result": 4, "error": null, "id": 123}')
    +highlightStr('json','{"type": "reply", "result": null, "error": {"code": 1000, "message": "Cannot divide by zero"}, "id": 124}')
    ul
        li #[code type] is always set to "reply"
        li #[code id] is set to the id passed in the corresponding #[a(href='#packets_method') method] packet
        li #[code result] is the unstructured result of the method, or null
        li
            p.
                #[code error] is an error which occurred, or null. If present it will always contain a "code" and an associated "message"
            p.
                Note that if fatal errors occur as a result of a method call, a websocket close frame will be sent instead of a reply. The close frame’s code and associated message will be the same as that which otherwise would have been sent in reply.error.
    h3#packets_event Event
    p.
        Event packets are sent when an action occurs which a client as asked to be notified about. Event packets look like the following:

    +highlightStr('json','{"type": "event", "event": "math_result", "data": 4}')
    ul
        li #[code type] is always set to "event"
        li #[code event] is the string name of the event
        li #[code data] is unstructured information associated with the event. Usually this is the same as found within the liveloading/sails event of the same type.
    h2#errors Error Codes
    p.
        Constellation uses the 4xxx error code range reserved for use by applications in addition to the standard 1xxx codes. The following codes are in use:
    ul
        li #[code 1011] - Sent in a close or method reply if an unknown internal error occurs.
        li #[code 1012] - Sent in a close frame when we deploy or restart Constellation; clients should attempt to reconnect.
        li #[code 4006] - Error parsing payload as JSON
        li #[code 4007] - Error decompressing a supposedly-gzipped payload
        li #[code 4008] - Unknown packet type
        li #[code 4009] - Unknown method name call
        li #[code 4010] - Error parsing method arguments (not the right type or structure)
        li #[code 4011] - The user session has expired; if using a cookie, they should log in again, or get a bearer auth token if using an authorization header.
        li #[code 4106] - Unknown event used in a livesubscribe call
        li #[code 4107] - You do not have access to subscribe to that livesubscribe event
        li #[code 4108] - You are already subscribed to that livesubscribe event (during livesubscribe)
        li #[code 4109] - You are not subscribed to that livesubscribe event (in response to a liveunsubscribe #[a(href='#packets_method') method])
        li #[code 4110] - You cannot make more subscriptions (in response to a livesubscribe #[a(href='#packets_method') method]) see #[a(href='#introduction__liveloading_limits') liveloading limits]
    h2#methods Methods
    h3#methods_livesubscribe livesubscribe
    p.
        A livesubscribe method allows users to subscribe to #[a(href='#events_live_events') liveloading events]. The number of events you can subscribe to is limited please see #[a(href='#introduction__liveloading_limits') liveloading limits]

    +highlightStr('json','{"type": "method", "method": "livesubscribe", "params": {"events": ["user:1:update", "channel:1:followed"]}, "id": 42}')
    ul
        li #[code events] is an array of events to subscribe to. Note that either all events are successfully subscribed to, or a failure occurs and no events are subscribed to. Either do or do not, there is no try.
    p.
        A livesubscribe reply looks like one of the following:
    ul
        li.
            A successful reply:
        +highlightStr('json','{"type": "reply", "result": null, "error": null, "id": 42}')
        li.
            A reply with an invalid event:
        +highlightStr('json','{"type": "reply", "result": null, "error": {"code": 4106, "message": "Unknown event \\"my silly event\\" "}, "id": 42}')
        li.
            A reply for an event you do not have permission to see:
        +highlightStr('json','{"type": "reply", "result": null, "error": {"code": 4107, "message": "You do not have permission to subscribe to \\"user:1:secrets\\""}, "id": 42}')
        li.
            A reply for an event you are already subscribed to:
        +highlightStr('json','{"type": "reply", "result": null, "error": {"code": 4108, "message": "Attempt to duplicate subscription to \\"user:1:update\\""}, "id": 42}')
    h3#methods_liveunsubscribe liveunsubscribe
    p.
        A liveunsubscribe method can be used to stop listening to previously-subscribed-to events:
    +highlightStr('json','{"type": "method", "method": "liveunsubscribe", "params": {"events": ["user:1:update", "channel:1:followed"]}, "id": 42}')
    ul
        li #[code events] is an array of events to unsubscribe from. Note that if you are not subscribed to one or more of the events, no error is returned.
    p.
        A liveunsubcribe reply looks like the following:
    +highlightStr('json','{"type": "reply", "result": null, "error": null, "id": 42}')
    h3#methods_ping ping
    p.
        A ping method should be used in environments where websocket implementations do not natively support pings.
    +highlightStr('json', '{"id":1,"type":"method","method":"ping","params":null}')

    p A ping reply is a blank #[a(href='#packets_reply') reply] packet with a matching id.
    +highlightStr('json','{"id":1,"type":"reply","result":{},"error":null}')

    h2#events Events
    h3#events_hello hello
    p.
        A hello event is sent down to the client when they first connect.
    +highlightStr('json','{"type": "event", "event": "hello", "data": {"authenticated": true}}')
    ul
        li #[code authenticated] is true if the session is authenticated as a user.

    h3#events_live live
    p A live event looks like the following. Do note the socket event names are not liveloading events. Events you ask for over liveloading are always "live" events which contain the liveloading information. This separation is added so that other kinds of events can be distinguished from liveloading events.
    +highlightStr('json','{"type": "event", "event": "live", "data": {"channel": "user:1:update", "payload": {"sparks": 10000}}}')
    h4#events_live_events Live Event Types
    p The following live events are available to #[a(href='#methods_livesubscribe') subscribe to].

    +liveEventsTable(true)

    include ../../snippets/help.pug
