extends ../reference_layout.pug
block title
    | Chat Reference | Mixer Developers

block navbar
    .navbar-wrapper
        .container
            nav.navbar.navbar-inverse: +navbar()
            h1 Chat Reference Documentation
block menu
    .hidden-print.rest-sidebar(role='complementary')
        nav
            ul.nav.nav-stacked
                include menu.pug
block reference
    h1(id='chat') Chat
    h2(id='chat__introduction') Introduction
    p.
        Our chat servers use a standard secure websocket protocol #[code wss://]. Messages are sent
        and received in standard JSON.
    h2(id='chat__connection') Connection
    p.
        To connect to the chat server, you first need to retrieve some connection details from our REST API. You can do this by calling the #[a(href='/rest.html#chats__chat__get') GET /chats/{channelId}] REST endpoint where #[code channelId] is the channel id of the channel you wish to join and chat in.
    include ../../tutorials/channelid.pug
    p.
        If you are authenticated when you make the request, you will receive an #[code authkey] in the response for authentication purposes. You may join chat and read messages without being authenticated,
        but you will not be able to participate in chat.
    p.
        This is what a typical response from the
        #[a(href='/rest.html#chats__chat__get') GET /chats/{channelId}] endpoint looks like:
    +highlightFile('http', 'reference/chat/chatEndpoint.json')
    p.
        Once you have the details, you'll need to use them to connect to a chat server. The response's #[code endpoint] array contains a list of chat servers. You should choose one randomly to connect to. If you lose connection to this address, you should reconnect to a different server (you can choose randomly or use a round-robin strategy of your choosing).
    p.
        After connecting to a server you must call the #[a(href='#chat__methods__auth') auth] method.

    h2(id='chat__packets') Packets
    p.
        There are 3 types of packets sent over the socket:
        #[code method], #[code reply], and #[code event] packets.
        The former two are typical RPC-style packets;
        think of sending them as calling a function or method and getting a return value back,
        but over the network.

    p.
        We go into more detail below, but a typical exchange between the server and client might look like this:
    +highlightFile('js', 'reference/chat/exchange.txt')

    h3(id='chat__packets__method') Method
    p.
        A method is sent to the chat server the server will respond with a #[a(href='#chat__packets__reply') Reply packet].
    table.table
        tbody
            tr
                td.col-xs-2
                    code type
                td.col-xs-10
                    | Must be #[code method].
            tr
                td
                    code method
                td The method name to execute.
            tr
                td
                    code arguments
                td An array of arguments, specific per method type.
            tr
                td
                    code id
                td.
                    Must be a unique numeric ID. If the method you sent has a
                    reply, the numeric ID will be sent back down in
                    the #[a(href='#chat__packets__reply') Reply] packet.
    h3(id='chat__packets__reply') Reply
    p.
        A reply is received from the server in response to a
        #[a(href='#chat__packets__method') Method] packet.
    table.table
        tbody
            tr
                td.col-xs-2
                    code type
                td.col-xs-10
                    | Must be #[code reply].
            tr
                td
                    code error
                td If an error  has not occured #[code null], otherwise an error message.
            tr
                td
                    code data
                td Associated event data - may be of any type, specific to the event.
            tr
                td
                    code id
                td.
                    Must be a unique numeric ID.
                    The ID will match the ID sent in the
                    #[a(href='#chat__packets__method') Method] packet that this
                    reply is in response to.
    h3(id='chat__packets__event') Event
    p.
        An event is received from the chat server when an event occurs in the channel's chat.
        This includes chat messages themselves, polls, and role changes.
        The full list can be found in the #[a(href='#chat__events') Events section] below.
    table.table
        tbody
            tr
                td.col-xs-2
                    code type
                td.col-xs-10
                    | Must be #[code event].
            tr
                td
                    code event
                td The event name.
            tr
                td
                    code data
                td Associated event data - may be of any type, specific to the event.
    h1(id='chat__methods') Methods
    for data, method in chat.methods
        h3(id=`chat__methods__${method}`)= method
        p!= marked(data.description)
        table.table
            thead
                th.col-xs-6 Request
                th.col-xs-6 Response
            tbody
                if data.examples
                    for example in data.examples
                        tr
                            td(colspan='2')= example.description
                        tr
                            td.col-xs-6: +highlightStr('json', JSON.stringify(example.data.request, null, 3))
                            if example.data.response
                                td.col-xs-6: +highlightStr('json', JSON.stringify(example.data.response, null, 3))
                            else
                                td.col-xs-6 No response
                else
                    tr
                        td.col-xs-6: +highlightStr('json', JSON.stringify(data.example.request, null, 3))
                        if data.example.response
                            td.col-xs-6: +highlightStr('json', JSON.stringify(data.example.response, null, 3))
                        else
                            td.col-xs-6 No response

    h1(id='chat__events') Events
    for data, event in chat.events
        h3(id=`chat__events__${event}`)= event
        p!= marked(data.description)
        if data.examples
            for example in data.examples
                h4= example.title
                p!= marked(example.description)
                +highlightStr('json', JSON.stringify(example.data, null, 3))
        else
            +highlightStr('json', JSON.stringify(data.example, null, 3))

    h1(id='chat__costreaming') Costreaming
    p In costreaming, multiple channels' chats are merged into one. All packets are identical, and the various Channel properties in methods and events include the channel each action was triggered from.

    h1(id='chat__troubleshooting') Troubleshooting
    h3 Getting #[code UNOTFOUND] a lot?
    p This error means that the chat server you're connecting to can't find a record of you when you try to authenticate. This can be caused by a number of reasons so make sure to check the following things.
    ul
        li That you're not confusing channelIds and userIds. These are two different numbers.
        li That the channel you're trying to connect to is valid.
        li That you've retrieved an authentication key from the #[a(href='/rest.html#chats__chat__get') GET /chats/{channelId}] endpoint recently. Authentication keys expire after a short period.
        li That you're calling the auth method with 3 arguments that are not null in the following order:
            ol
                li The #[strong channel id] of the channel you wish to chat in encoded as a #[strong Number].
                li The #[strong user id] of the user you wish to chat as encoded as a #[strong Number].
                li An #[strong authentication key] retrieved from #[a(href='/rest.html#chats__chat__get') GET /chats/{channelId}], where #[strong channelId] matches the first argument. It should be encoded as a #[strong String].
    include ../../snippets/help.pug
