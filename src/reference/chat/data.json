{
  "methods": {
    "auth": {
      "description": "Authenticate as an active user in a specified channel. Arguments are `channelId`, `userId`, `key`. \n\n You can connect anonymously by supplying just the `channnelId` as an argument, but if you do this you will not be able to send messages or participate in chat. This can be useful for creating chat overlays.",
      "arguments": [
        "The **channel ID** of the channel you are joining.",
        "The **user ID** of the user you are connecting as. This can be omitted if you are connecting anonymously.",
        "The **authorization key** retrieved from a request to our REST API, as explained in the [Connection](#chat__connection) section. This can be omitted if you are connecting anonymously."
      ],
      "examples": [
        {
          "description": "Authenticating as a User successfully.",
          "data": {
            "request": {
              "type": "method",
              "method": "auth",
              "arguments": [
                12345,
                54321,
                "key"
              ],
              "id": 0
            },
            "response": {
              "type": "reply",
              "error": null,
              "id": 0,
              "data": {
                "authenticated": true,
                "roles": [
                  "Owner"
                ]
              }
            }
          }
        },
        {
          "description": "Authenticating anonymously",
          "data": {
            "request": {
              "type": "method",
              "method": "auth",
              "arguments": [
                12345
              ],
              "id": 0
            },
            "response": {
              "type": "reply",
              "error": null,
              "id": 0,
              "data": {
                "authenticated": false,
                "roles": []
              }
            }
          }
        },
        {
          "description": "An unsuccessful authentication attempt.",
          "data": {
            "request": {
              "type": "method",
              "method": "auth",
              "arguments": [
                12345,
                12345,
                "Not an AuthKey"
              ],
              "id": 0
            },
            "response": {
              "type": "reply",
              "error": {
                "code": 1,
                "message": "UNOTFOUND",
                "stacktrace": [],
                "data": {}
              },
              "id": 0
            }
          }
        }
      ]
    },
    "msg": {
      "description": "Send a chat message to the server. The server will reply with data identical to a [ChatMessage](#chat__events__) event.",
      "permission": "chat",
      "arguments": [
        "The message to send, as a string."
      ],
      "example": {
        "request": {
          "type": "method",
          "method": "msg",
          "arguments": [
            "Hello World!"
          ],
          "id": 2
        },
        "response": {
          "type": "reply",
          "error": null,
          "id": 2,
          "data": {
            "channel": 12345,
            "id": "06cba8a0-3a4a-11e6-b410-e9a72fcede64",
            "user_name": "username",
            "user_id": 12345,
            "user_roles": [
              "User"
            ],
            "message": {
              "message": [
                {
                  "type": "text",
                  "data": "Hello World!",
                  "text": "Hello World!"
                }
              ],
              "meta": {}
            }
          }
        }
      }
    },
    "whisper": {
      "description": "Send a whisper to another user in the chat.",
      "permission": "whisper",
      "arguments": [
        "The username of the user that the whisper will be sent to.",
        "The whisper's message."
      ],
      "example": {
        "request": {
          "type": "method",
          "method": "whisper",
          "arguments": [
            "targetUsername",
            "message"
          ],
          "id": 5
        },
        "response": {
          "type": "reply",
          "error": null,
          "id": 5,
          "data": {
            "channel": 12345,
            "id": "077e31c0-3a34-11e6-89dd-6363b2f3be15",
            "user_name": "username",
            "user_id": 12345,
            "user_roles": [
              "User"
            ],
            "message": {
              "message": [
                {
                  "type": "text",
                  "data": "hi",
                  "text": "hi"
                }
              ],
              "meta": {
                "whisper": true
              }
            },
            "target": "username"
          }
        }
      }
    },
    "vote:choose": {
      "description": "Cast a vote in the current poll.",
      "permission": "poll_vote",
      "arguments": [
        "The numerical index of the option that the vote is being cast for."
      ],
      "example": {
        "request": {
          "type": "method",
          "method": "vote:choose",
          "arguments": [
            0
          ],
          "id": 3
        },
        "response": {
          "type": "reply",
          "error": null,
          "id": 3,
          "data": true
        }
      }
    },
    "vote:start": {
      "description": "Start a poll in the channel.",
      "permission": "poll_start",
      "arguments": [
        "The poll's question.",
        "An array of possible options.",
        "The duration of the poll, in seconds."
      ],
      "example": {
        "request": {
          "type": "method",
          "method": "vote:start",
          "arguments": [
            "Turkey or Ham?",
            [
              "Turkey",
              "Ham"
            ],
            30
          ],
          "id": 3
        },
        "response": {
          "type": "reply",
          "error": null,
          "id": 3,
          "data": "Poll started."
        }
      }
    },
    "timeout": {
      "description": "Time a user out and purge their chat messages. They cannot send messages until the duration is over. The user being timed out must be in the channel.",
      "permission": "timeout",
      "arguments": [
        "The username of the user who will be timed out.",
        "The duration for which the user will be unable to send messages. A human-readable duration with units can be provided (such as `30s` or `1m15s`), or providing no unit will result in the value being taken as seconds."
      ],
      "example": {
        "request": {
          "type": "method",
          "method": "timeout",
          "arguments": [
            "username",
            "30s"
          ],
          "id": 4
        },
        "response": {
          "type": "reply",
          "error": null,
          "id": 4,
          "data": "username has been timed out for 30s."
        }
      }
    },
    "purge": {
      "description": "Purge a user's messages from that chat without timing them out.",
      "permission": "purge",
      "arguments": [
        "The username of the user to purge."
      ],
      "example": {
        "request": {
          "type": "method",
          "method": "purge",
          "arguments": [
            "username"
          ],
          "id": 5
        },
        "response": {
          "type": "reply",
          "error": null,
          "id": 5
        }
      }
    },
    "deleteMessage": {
      "description": "Delete a message from chat.",
      "permission": "remove_message",
      "arguments": [
        "The `id` property of the message to delete."
      ],
      "example": {
        "request": {
          "type": "method",
          "method": "deleteMessage",
          "arguments": [
            "8e07a0b0-3a2e-11e6-a9ef-0b7037d1fbdd"
          ],
          "id": 10
        },
        "response": {
          "type": "reply",
          "error": null,
          "id": 10,
          "data": "Message deleted."
        }
      }
    },
    "clearMessages": {
      "description": "Clear all chat messages in the channel.",
      "permission": "clear_messages",
      "example": {
        "request": {
          "type": "method",
          "method": "clearMessages",
          "arguments": [],
          "id": 11
        },
        "response": {
          "type": "reply",
          "error": null,
          "id": 11,
          "data": "Messages cleared."
        }
      }
    },
    "history": {
      "description": "Request previous messages from this chat from before you joined.",
      "arguments": [
        "The number of messages to request. The maximum value is `100`."
      ],
      "example": {
        "request": {
          "type": "method",
          "method": "history",
          "arguments": [
            1
          ],
          "id": 1
        },
        "response": {
          "type": "reply",
          "error": null,
          "id": 1,
          "data": [
            {
              "channel": 12345,
              "id": "8e07a0b0-3a2e-11e6-a9ef-0b7037d1fbdd",
              "user_name": "username",
              "user_id": 186526,
              "user_roles": [
                "User"
              ],
              "message": {
                "message": [
                  {
                    "type": "text",
                    "data": "historic message",
                    "text": "historic message"
                  }
                ],
                "meta": {}
              }
            }
          ]
        }
      }
    },
    "giveaway:start": {
      "description": "Start a giveaway in the channel. After sending this method, the 'HypeBot' user will publicly announce the winner of the giveaway, who will be randomly selected.",
      "permission": "giveaway_start",
      "example": {
        "request": {
          "type": "method",
          "method": "giveaway:start",
          "arguments": [],
          "id": 11
        },
        "response": {
          "type": "reply",
          "error": null,
          "id": 11,
          "data": "Starting a giveaway"
        }
      }
    },
    "ping": {
      "description": "A ping method. This is used in environments where websocket implementations do not natively support pings.",
      "example": {
        "request": {
          "type": "method",
          "method": "ping",
          "arguments": [],
          "id": 12
        },
        "response": {
          "type": "reply",
          "error": null,
          "id": 12
        }
      }
    },
    "attachEmotes": {
      "description": "Enable an enhancement to the `ChatMessage` event. This will populate the `meta` property of the event with a hash containing the emoticon text mapped to the base64 PNG representation.",
      "examples": [
        {
          "description": "Tells the chat server that you want emotes to be attached to chat messages.",
          "data": {
            "request": {
              "type": "method",
              "method": "attachEmotes",
              "arguments": [],
              "id": 12
            },
            "response": {
              "type": "reply",
              "error": null,
              "id": 12
            }
          }
        },
        {
          "description": "The `ChatMessage` event will now look as follows:",
          "data": {
            "request": {},
            "response": {
              "type": "event",
              "event": "ChatMessage",
              "data": {
                "channel": 143,
                "id": "f1e092c0-9c8c-11e6-91dd-55a101b33e4e",
                "user_name": "Jamy",
                "user_id": 162,
                "user_roles": [
                  "Owner"
                ],
                "message": {
                  "message": [
                    {
                      "type": "emoticon",
                      "source": "builtin",
                      "pack": "default",
                      "coords": {
                        "x": 96,
                        "y": 0,
                        "width": 24,
                        "height": 24
                      },
                      "text": ":)"
                    }
                  ],
                  "meta": {
                    "emoticons": {
                      ":)": "iVBORw0KGgoAAAANSUhE...AAAElFTkSuQmCC"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    }
  },
  "events": {
    "WelcomeEvent": {
      "description": "Sent by the server once you're fully connected to chat.",
      "example": {
        "type": "event",
        "event": "WelcomeEvent",
        "data": {
          "server": "cb4fce87-cd05-44db-830e-cccc53a33fab"
        }
      }
    },
    "ChatMessage": {
      "description": "Sent by the server when a client sends a message. It contains multiple message components, such as `text`, `emoticon`, `link`, and `tag`. The `meta` property of a message contains various attributes which define additional details about where the message comes from.",
      "examples": [
        {
          "title": "Regular Message",
          "description": "A regular channel message seen by all users",
          "data": {
            "type": "event",
            "event": "ChatMessage",
            "data": {
              "type": "event",
              "event": "ChatMessage",
              "data": {
                "channel": 12345,
                "id": "cfa8a5b0-2ec5-11e6-1234-f3d652ffec28",
                "user_name": "Username",
                "user_id": 12345,
                "user_roles": [
                  "User"
                ],
                "message": {
                  "message": [
                    {
                      "type": "text",
                      "data": "Hello! ",
                      "text": "Hello! "
                    },
                    {
                      "type": "emoticon",
                      "source": "builtin",
                      "pack": "default",
                      "coords": {
                        "x": 96,
                        "y": 0,
                        "width": 24,
                        "height": 24
                      },
                      "text": ":)"
                    },
                    {
                      "type": "text",
                      "data": " ",
                      "text": " "
                    },
                    {
                      "type": "link",
                      "url": "http://mixer.com/Beam",
                      "text": "mixer.com/Beam"
                    },
                    {
                      "type": "emoticon",
                      "source": "external",
                      "pack": "https://uploads.mixer.com/emoticons/x.png",
                      "coords": {
                        "x": 24,
                        "y": 48,
                        "width": 24,
                        "height": 24
                      },
                      "text": ":coolpartneremote"
                    }
                  ],
                  "meta": {}
                }
              }
            }
          }
        },
        {
          "title": "Whisper",
          "description": "A private whisper from one user to another which is only sent to the recipient. The `meta` object contains a `whisper` attribute which is `true`.",
          "data": {
            "type": "event",
            "event": "ChatMessage",
            "data": {
              "channel": 12345,
              "id": "eaf6e9b0-3a25-11e6-b410-e9a72fcede64",
              "user_name": "username",
              "user_id": 12345,
              "user_roles": [
                "User"
              ],
              "message": {
                "message": [
                  {
                    "type": "text",
                    "data": "hi",
                    "text": "hi"
                  }
                ],
                "meta": {
                  "whisper": true
                }
              },
              "target": "recipient username"
            }
          }
        },
        {
          "title": "Action",
          "description": "When a user uses `/me` in chat. The `meta` object contains a `me` attribute which is `true`.",
          "data": {
            "type": "event",
            "event": "ChatMessage",
            "data": {
              "channel": 12345,
              "id": "c46148d0-3a30-11e6-b368-2953589298fa",
              "user_name": "username",
              "user_id": 12345,
              "user_roles": [
                "User"
              ],
              "message": {
                "message": [
                  {
                    "type": "text",
                    "data": "waves",
                    "text": "waves"
                  }
                ],
                "meta": {
                  "me": true
                }
              }
            }
          }
        },
        {
          "title": "Tag",
          "description": "When a user tags another user with `@` e.g. `@username`",
          "data": {
            "channel": 12345,
            "id": "c46148d0-3a30-11e6-b368-2953589298fa",
            "user_name": "username",
            "user_id": 12345,
            "user_roles": [
              "User"
            ],
            "message": {
              "message": [
                {
                  "text": "@username",
                  "type": "tag",
                  "username": "username",
                  "id": 12345
                }
              ],
              "meta": {}
            }
          }
        }
      ]
    },
    "UserJoin": {
      "description": "Sent when a user joins the chat. This is not emitted for unauthenticated users.",
      "example": {
        "originatingChannel": 1,
        "username": "USERNAME",
        "roles": [
          "User"
        ],
        "id": 12345
      }
    },
    "UserLeave": {
      "description": "Sent when a user leaves the chat. This is not emitted for unauthenticated users.",
      "example": {
        "originatingChannel": 1,
        "username": "USERNAME",
        "id": 12345
      }
    },
    "PollStart": {
      "description": "Initially sent when a new poll is started. Then, over the course of a poll, it is re-sent with information about the poll's progress.",
      "example": {
        "originatingChannel": 1,
        "q": "How's the weather?",
        "answers": [
          "Good.",
          "Bad."
        ],
        "author": {
          "user_name": "USERNAME",
          "user_id": 12345,
          "user_roles": [
            "Mod"
          ]
        },
        "duration": 29996,
        "endsAt": 1465533783407,
        "voters": 0,
        "responses": {
          "Good.": 0,
          "Bad.": 0
        }
      }
    },
    "PollEnd": {
      "description": "Sent when a poll has ended.",
      "example": {
        "originatingChannel": 1,
        "q": "How's the weather?",
        "answers": [
          "Good.",
          "Bad."
        ],
        "author": {
          "user_name": "USERNAME",
          "user_id": 12345,
          "user_roles": [
            "Mod"
          ]
        },
        "duration": 29996,
        "endsAt": 1465533783407,
        "voters": 5,
        "responses": {
          "Good.": 2,
          "Bad.": 3
        }
      }
    },
    "DeleteMessage": {
      "description": "Sent when a message has been deleted from chat.",
      "example": {
        "type": "event",
        "event": "DeleteMessage",
        "data": {
          "moderator": {
            "user_name": "USERNAME",
            "user_id": 12345,
            "user_roles": [
              "Mod",
              "User"
            ],
            "user_level": 12
          },
          "id": "b6661250-3a31-11e6-830a-a1d867c5621f"
        }
      }
    },
    "PurgeMessage": {
      "description": "Sent when a user's messages are purged. Note: The moderator object is only set when a user is purged from in chat. The ban event triggers a purge but the object is not defined.",
      "example": {
        "type": "event",
        "event": "PurgeMessage",
        "data": {
          "moderator": {
            "user_name": "USERNAME",
            "user_id": 12345,
            "user_roles": [
              "Mod",
              "User"
            ],
            "user_level": 12
          },
          "user_id": 12345
        }
      }
    },
    "ClearMessages": {
      "description": "Sent when the server clears all messages in chat.",
      "example": {
        "type": "event",
        "event": "ClearMessages",
        "data": {
          "clearer": {
            "user_name": "USERNAME",
            "user_id": 12345,
            "user_roles": [
              "Mod",
              "User"
            ],
            "user_level": 12
          }
        }
      }
    },
    "UserUpdate": {
      "description": "Sent when a user is updated, usually on status change. E.g. Modding, Subscribing, Banning.",
      "example": {
        "type": "event",
        "event": "UserUpdate",
        "data": {
          "user": 12345,
          "roles": [
            "Banned",
            "Pro",
            "User"
          ],
          "permissions": [],
          "username": "username"
        }
      }
    },
    "UserTimeout": {
      "description": "Sent only to a user when they are timed out.",
      "example": {
        "type": "event",
        "event": "UserTimeout",
        "data": {
          "user": {
            "user_name": "username",
            "user_id": 102534,
            "user_roles": [
              "Pro",
              "User"
            ]
          },
          "duration": 59998
        }
      }
    }
  }
}
