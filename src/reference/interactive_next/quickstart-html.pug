extends ./page.pug

block reference
    h2#html-introduction Introduction

    p Writing with pure HTML and JavaScript is the fastest and easiest way to get started building rich custom control experiences for Mixer. We'll cover setting up a project, making some changes, and running it on Mixer.

    h2#html-quickstart Quickstart
    - var prefix = 'html';
    include ./installing-cdk-1.pug

    img(src='/img/reference/interactive/cdk/cdkHTML.png' alt='Screenshot, showing the HTML template selected')

    p Next, you will be asked to choose your Starter Template. For this guide choose, the #[a(href='https://github.com/mixer/cdk-html-starter' target='_blank') HTML template].

    include ./installing-cdk-2.pug

    p Once everything has been completed, the CDK will show you the HTML Starter in a preview State within its UI. Each time you make changes to your custom control code it will detect this change and update the preview to show you the new output.

    p If you haven't done already, you should now open your new project in your favorite code editor. We're now ready to take a look at some code.

    p Let's look at what's going on in #[code scripts.js]:

    +highlightFile('javascript', 'reference/interactive_next/quickstart-html/basic.js')

    p #[code mixer.display.moveVideo(...)] tells Mixer to move the video container so that it is 50 pixels from the edges of the stage. One of the coolest things you can do from a custom control is resize the video to make the experience you want!

    p #[code mixer.socket.call('giveInput', ...)] activates whenever you click on the "Hello World" text. This method sends a #[code giveInput] message down to the game client. To learn more about sending messages between a control and the game client, check out the #[a(href='/reference/interactive_next/game-clients.html') game client communication documentation].

    p #[code mixer.isLoaded()] tells Mixer that your control has loaded. It's best to do this when you're finished setting up and loading in any images or scripts. Viewers on Mixer won't see your control until #[code isLoaded()] is called.

    p In summary, we position the video on the stage, setup a handler to send custom data back to the game, and then tell Mixer the control is ready to be seen by the world.

    h3#html-make-changes Make a Change

    p Now that we've gone over the basics, let's make an overlay that automatically resizes itself to always be over the video - even when the browser window changes!

    .alert.alert-info Automatically resizing and adjusting to the size of the browser is called #[em responsive development] and is very important in building custom controls. You can read more in our #[a(href='/reference/interactive_next/best-practices.html') best practices].

    p Let's talk strategy: our goal will be to place a semi-transparent #[code div] completely covering the real position of the video, independant of the size of the browser window or the aspect ratio of the video source. To do that, we're going to use the #[code position()] API, which provides a handy observable for the real position of the video. Whenever that updates, we'll move our #[code div] so that it aligns with the video position.

    p To start, we need an element to overlay on top of the video. We'll add an overlay #[code div] to #[code index.html] by replacing the file contents with the following:

    +highlightFile('html', 'reference/interactive_next/quickstart-html/make-a-change-01.html')

    p Next, we need to setup the handler for when the window position changes that moves and resizes the #[code div] to the correct location on the video. Add the #[code handleVideoResized()] function to the end of #[code scripts.js]:

    +highlightFile('javascript', 'reference/interactive_next/quickstart-html/make-a-change-02.js')

    p Lastly, let's tie it all together. At the top of the #[code initMixer()] function, add the following. This will subscribe our handler function to updates and does the initial positioning of the overlay.

    +highlightFile('javascript', 'reference/interactive_next/quickstart-html/make-a-change-03.js')

    p All together, here's our #[code scripts.js] file:

    +highlightFile('javascript', 'reference/interactive_next/quickstart-html/make-a-change-04.js')

    p That's it! Go back to the CDK and you should see the overlay being positioned properly.

    p You can try changing the emulated device to see how your changes look on different devices. To do this, open the view menu at the top of the CDK and select "Device Emulation". In the panel that opens, try changing the device to a Phone or tablet and watch your overlay resize automatically.

    h3#html-next-steps Next Steps

    ul
        li Read more about #[a(href='/reference/interactive_next/game-clients.html') sending data between a custom control and a game client]
        li Check out the #[a(href='/reference/interactive_next/best-practices.html') best practices for building custom control experiences]
        li Learn about #[a(href='/reference/interactive_next/workflow.html') testing and publishing custom control bundles] for when you're ready to go big with your integration
        li Ask questions and get help #[a(href='https://gitter.im/Mixer/developers') on Gitter]
